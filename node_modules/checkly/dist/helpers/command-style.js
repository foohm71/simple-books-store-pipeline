"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandStyle = void 0;
const chalk_1 = __importDefault(require("chalk"));
const core_1 = require("@oclif/core");
const wrap_1 = require("./wrap");
const log_symbols_1 = __importDefault(require("log-symbols"));
const wrapOptions = {
    prefix: '  ',
    length: 78,
};
class CommandStyle {
    c;
    constructor(command) {
        this.c = command;
    }
    actionStart(message) {
        if (this.c.fancy) {
            core_1.ux.action.start(message, undefined, { stdout: true });
        }
    }
    actionSuccess() {
        if (this.c.fancy) {
            core_1.ux.action.stop(`✅`);
            this.c.log();
        }
    }
    actionFailure() {
        if (this.c.fancy) {
            core_1.ux.action.stop(`❌`);
            this.c.log();
        }
    }
    comment(message) {
        this.c.log(chalk_1.default.cyan((0, wrap_1.wrap)(message, { ...wrapOptions, prefix: '// ' })));
        this.c.log();
    }
    longSuccess(title, message) {
        this.c.log(`${log_symbols_1.default.success} ${title}`);
        this.c.log();
        this.c.log((0, wrap_1.wrap)(message, wrapOptions));
        this.c.log();
    }
    shortSuccess(message) {
        this.c.log(`${log_symbols_1.default.success} ${message}`);
        this.c.log();
    }
    longInfo(title, message) {
        this.c.log(`${log_symbols_1.default.info} ${title}`);
        this.c.log();
        this.c.log((0, wrap_1.wrap)(message, wrapOptions));
        this.c.log();
    }
    shortInfo(message) {
        this.c.log(`${log_symbols_1.default.info} ${message}`);
        this.c.log();
    }
    longWarning(title, message) {
        this.c.log(`${log_symbols_1.default.warning} ${title}`);
        this.c.log();
        this.c.log(chalk_1.default.yellow((0, wrap_1.wrap)(message, wrapOptions)));
        this.c.log();
    }
    shortWarning(message) {
        this.c.log(`${log_symbols_1.default.warning} ${chalk_1.default.yellow(message)}`);
        this.c.log();
    }
    longError(title, message) {
        this.c.log(`${log_symbols_1.default.error} ${title}`);
        this.c.log();
        this.c.log(chalk_1.default.red((0, wrap_1.wrap)(message, wrapOptions)));
        this.c.log();
    }
    shortError(message) {
        this.c.log(`${log_symbols_1.default.error} ${chalk_1.default.red(message)}`);
        this.c.log();
    }
    fatal(message) {
        this.c.log(chalk_1.default.red(message));
        this.c.log();
    }
}
exports.CommandStyle = CommandStyle;
//# sourceMappingURL=command-style.js.map