"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramAlertChannelCodegen = void 0;
const node_querystring_1 = __importDefault(require("node:querystring"));
const codegen_1 = require("./internal/codegen");
const sourcegen_1 = require("../sourcegen");
const alert_channel_codegen_1 = require("./alert-channel-codegen");
const telegram_alert_channel_1 = require("./telegram-alert-channel");
function apiKeyFromUrl(url) {
    const match = /https:\/\/api.telegram.org\/bot([^/]+)\/sendMessage/.exec(url);
    if (match) {
        return match[1];
    }
}
function parseTemplate(template) {
    const values = node_querystring_1.default.parse(template);
    const singleValue = (key) => {
        const value = values[key];
        if (Array.isArray(value)) {
            return value[0];
        }
        return value;
    };
    return {
        chatId: singleValue('chat_id'),
        text: singleValue('text'),
    };
}
const construct = 'TelegramAlertChannel';
class TelegramAlertChannelCodegen extends codegen_1.Codegen {
    validateSafety(resource) {
        const { config } = resource;
        if (config.method !== 'POST') {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'method' (expected 'POST')`);
        }
        if (config.headers !== undefined && config.headers.length !== 0) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'headers' (expected no value or an empty array)`);
        }
        if (config.queryParameters !== undefined && config.queryParameters.length !== 0) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'queryParameters' (expected no value or an empty array)`);
        }
        if (config.webhookSecret) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'webhookSecret' (expected no value)`);
        }
    }
    describe(resource) {
        this.validateSafety(resource);
        return `Telegram Alert Channel: ${resource.config.name}`;
    }
    prepare(logicalId, resource, context) {
        this.validateSafety(resource);
        const { name } = resource.config;
        const filename = context.filePath('resources/alert-channels/telegram', name, {
            unique: true,
        });
        context.registerAlertChannel(resource.id, `${name} telegram`, this.program.generatedConstructFile(filename.fullPath));
    }
    gencode(logicalId, resource, context) {
        this.validateSafety(resource);
        const { id, file } = context.lookupAlertChannel(resource.id);
        file.namedImport(construct, 'checkly/constructs');
        const { config } = resource;
        file.section((0, sourcegen_1.decl)(id, builder => {
            builder.variable((0, sourcegen_1.expr)((0, sourcegen_1.ident)(construct), builder => {
                builder.new(builder => {
                    builder.string(logicalId);
                    builder.object(builder => {
                        builder.string('name', config.name);
                        const apiKey = apiKeyFromUrl(config.url);
                        if (apiKey) {
                            builder.string('apiKey', apiKey);
                        }
                        else {
                            throw new Error(`Failed to extract Telegram API Key from webhook template: ${config.template}`);
                        }
                        if (config.template) {
                            const { chatId, text } = parseTemplate(config.template);
                            if (chatId) {
                                builder.string('chatId', chatId);
                            }
                            else {
                                throw new Error(`Failed to extract Telegram Chat ID from webhook template: ${config.template}`);
                            }
                            if (text) {
                                if (text !== telegram_alert_channel_1.TelegramAlertChannel.DEFAULT_PAYLOAD) {
                                    builder.string('payload', text);
                                }
                            }
                            else {
                                throw new Error(`Failed to extract Telegram payload from webhook template: ${config.template}`);
                            }
                        }
                        (0, alert_channel_codegen_1.buildAlertChannelProps)(builder, resource);
                    });
                });
            }));
            builder.export();
        }));
    }
}
exports.TelegramAlertChannelCodegen = TelegramAlertChannelCodegen;
//# sourceMappingURL=telegram-alert-channel-codegen.js.map