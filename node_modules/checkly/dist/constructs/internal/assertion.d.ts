export interface Assertion<Source extends string> {
    source: Source;
    property: string;
    comparison: string;
    target: string;
    regex: string | null;
}
export declare class NumericAssertionBuilder<Source extends string> {
    source: Source;
    constructor(source: Source);
    equals(target: number): Assertion<Source>;
    notEquals(target: number): Assertion<Source>;
    lessThan(target: number): Assertion<Source>;
    greaterThan(target: number): Assertion<Source>;
    /** @private */
    private _toAssertion;
}
export declare class GeneralAssertionBuilder<Source extends string> {
    source: Source;
    property?: string;
    regex?: string;
    constructor(source: Source, property?: string, regex?: string);
    equals(target: string | number | boolean): Assertion<Source>;
    notEquals(target: string | number | boolean): Assertion<Source>;
    hasKey(target: string): Assertion<Source>;
    notHasKey(target: string): Assertion<Source>;
    hasValue(target: string | number | boolean): Assertion<Source>;
    notHasValue(target: string | number | boolean): Assertion<Source>;
    isEmpty(): Assertion<Source>;
    notEmpty(): Assertion<Source>;
    lessThan(target: string | number | boolean): Assertion<Source>;
    greaterThan(target: string | number | boolean): Assertion<Source>;
    contains(target: string): Assertion<Source>;
    notContains(target: string): Assertion<Source>;
    isNull(): Assertion<Source>;
    isNotNull(): Assertion<Source>;
    /** @private */
    private _toAssertion;
}
