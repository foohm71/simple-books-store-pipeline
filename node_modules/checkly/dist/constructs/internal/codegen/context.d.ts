import { CaseFormat, GeneratedFile, IdentifierValue } from '../../../sourcegen';
import { ProgramFile } from '../../../sourcegen/program';
import { ConstructExport } from '../../project';
export declare class MissingContextVariableMappingError extends Error {
}
export declare abstract class VariableLocator {
    id: IdentifierValue;
    filePath: string;
    constructor(id: IdentifierValue, filePath: string);
}
export declare class GeneratedVariableLocator extends VariableLocator {
    file: GeneratedFile;
    constructor(id: IdentifierValue, file: GeneratedFile);
}
export declare class FriendVariableLocator extends VariableLocator {
}
export interface FilenameOptions {
    tags?: string[];
    isolate?: boolean;
    unique?: boolean;
    contentKey?: string;
    case?: CaseFormat;
}
export declare class FilePath {
    fullPath: string;
    constructor(fullPath: string);
    get extless(): string;
}
export declare class Context {
    #private;
    filePath(parent: string, hint: string, options?: FilenameOptions): FilePath;
    importVariable(locator: GeneratedVariableLocator, file: GeneratedFile): IdentifierValue;
    importFriendVariable(locator: FriendVariableLocator, file: GeneratedFile): IdentifierValue;
    registerCheckGroup(physicalId: number, name: string, file: GeneratedFile): GeneratedVariableLocator;
    lookupCheckGroup(physicalId: number): GeneratedVariableLocator;
    registerFriendCheckGroup(physicalId: number, friend: ConstructExport): FriendVariableLocator;
    lookupFriendCheckGroup(physicalId: number): FriendVariableLocator;
    registerAlertChannel(physicalId: number, name: string, file: GeneratedFile): GeneratedVariableLocator;
    lookupAlertChannel(physicalId: number): GeneratedVariableLocator;
    registerFriendAlertChannel(physicalId: number, friend: ConstructExport): FriendVariableLocator;
    lookupFriendAlertChannel(physicalId: number): FriendVariableLocator;
    registerPrivateLocation(physicalId: string, name: string, file: GeneratedFile): GeneratedVariableLocator;
    lookupPrivateLocation(physicalId: string): GeneratedVariableLocator;
    registerFriendPrivateLocation(physicalId: string, friend: ConstructExport): FriendVariableLocator;
    lookupFriendPrivateLocation(physicalId: string): FriendVariableLocator;
    registerPrivateLocationGroupAssignment(privateLocationPhysicalId: string, groupPhysicalId: number): void;
    lookupCheckGroupPrivateLocations(groupPhysicalId: number): string[];
    registerPrivateLocationCheckAssignment(privateLocationPhysicalId: string, checkPhysicalId: string): void;
    lookupCheckPrivateLocations(checkPhysicalId: string): string[];
    registerAlertChannelCheckSubscription(alertChannelPhysicalId: number, checkPhysicalId: string): void;
    lookupCheckAlertChannels(checkPhysicalId: string): number[];
    registerAlertChannelGroupSubscription(alertChannelPhysicalId: number, groupPhysicalId: number): void;
    lookupCheckGroupAlertChannels(groupPhysicalId: number): number[];
    registerStatusPageService(physicalId: string, name: string, file: GeneratedFile): GeneratedVariableLocator;
    lookupStatusPageService(physicalId: string): GeneratedVariableLocator;
    registerFriendStatusPageService(physicalId: string, friend: ConstructExport): FriendVariableLocator;
    lookupFriendStatusPageService(physicalId: string): FriendVariableLocator;
    registerKnownSecret(name: string): boolean;
    registerAuxiliarySnippetFile(physicalId: number, snippetFile: ProgramFile): void;
    lookupAuxiliarySnippetFile(physicalId: number): ProgramFile | undefined;
    findScriptSnippetFiles(content: string): ProgramFile[];
}
