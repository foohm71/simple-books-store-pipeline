"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSnippetDependencies = exports.validateScript = exports.snippetUsesHandlebarsSyntax = exports.isSnippet = exports.isSafeSnippetFilename = exports.UnsupportedScriptError = void 0;
const parser_1 = require("../../../services/check-parser/parser");
class UnsupportedScriptError extends Error {
}
exports.UnsupportedScriptError = UnsupportedScriptError;
function isSafeSnippetFilename(name) {
    // These are the characters the backend supports.
    return /^[\w-]+$/.test(name);
}
exports.isSafeSnippetFilename = isSafeSnippetFilename;
function isSnippet(resource) {
    if (typeof resource.id !== 'number') {
        return false;
    }
    if (typeof resource.name !== 'string') {
        return false;
    }
    if (typeof resource.script !== 'string') {
        return false;
    }
    validateScript(resource.script);
    return true;
}
exports.isSnippet = isSnippet;
function snippetUsesHandlebarsSyntax(script) {
    return script.includes('{{>') || script.includes('{{#');
}
exports.snippetUsesHandlebarsSyntax = snippetUsesHandlebarsSyntax;
function validateScript(content) {
    if (snippetUsesHandlebarsSyntax(content)) {
        throw new UnsupportedScriptError(`Conversion from legacy handlebars syntax is not supported.`);
    }
}
exports.validateScript = validateScript;
const SNIPPET_PATH_PREFIX = './snippets/';
function parseSnippetDependencies(content) {
    const { module: { dependencies }, error } = parser_1.Parser.parseDependencies('__placeholder.ts', content);
    if (error) {
        throw new Error(`Failed to parse '${SNIPPET_PATH_PREFIX}...' dependencies: ${error}`, { cause: error });
    }
    return dependencies
        .filter(value => value.startsWith(SNIPPET_PATH_PREFIX))
        .map(value => value.slice(SNIPPET_PATH_PREFIX.length));
}
exports.parseSnippetDependencies = parseSnippetDependencies;
//# sourceMappingURL=snippet.js.map