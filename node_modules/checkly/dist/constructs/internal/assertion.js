"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralAssertionBuilder = exports.NumericAssertionBuilder = void 0;
class NumericAssertionBuilder {
    source;
    constructor(source) {
        this.source = source;
    }
    equals(target) {
        return this._toAssertion('EQUALS', target);
    }
    notEquals(target) {
        return this._toAssertion('NOT_EQUALS', target);
    }
    lessThan(target) {
        return this._toAssertion('LESS_THAN', target);
    }
    greaterThan(target) {
        return this._toAssertion('GREATER_THAN', target);
    }
    /** @private */
    _toAssertion(comparison, target) {
        return {
            source: this.source,
            comparison,
            property: '',
            target: target.toString(),
            regex: null,
        };
    }
}
exports.NumericAssertionBuilder = NumericAssertionBuilder;
class GeneralAssertionBuilder {
    source;
    property;
    regex;
    constructor(source, property, regex) {
        this.source = source;
        this.property = property;
        this.regex = regex;
    }
    equals(target) {
        return this._toAssertion('EQUALS', target);
    }
    notEquals(target) {
        return this._toAssertion('NOT_EQUALS', target);
    }
    hasKey(target) {
        return this._toAssertion('HAS_KEY', target);
    }
    notHasKey(target) {
        return this._toAssertion('NOT_HAS_KEY', target);
    }
    hasValue(target) {
        return this._toAssertion('HAS_VALUE', target);
    }
    notHasValue(target) {
        return this._toAssertion('NOT_HAS_VALUE', target);
    }
    isEmpty() {
        return this._toAssertion('IS_EMPTY');
    }
    notEmpty() {
        return this._toAssertion('NOT_EMPTY');
    }
    lessThan(target) {
        return this._toAssertion('LESS_THAN', target);
    }
    greaterThan(target) {
        return this._toAssertion('GREATER_THAN', target);
    }
    contains(target) {
        return this._toAssertion('CONTAINS', target);
    }
    notContains(target) {
        return this._toAssertion('NOT_CONTAINS', target);
    }
    isNull() {
        return this._toAssertion('IS_NULL');
    }
    isNotNull() {
        return this._toAssertion('NOT_NULL');
    }
    /** @private */
    _toAssertion(comparison, target) {
        return {
            source: this.source,
            comparison,
            property: this.property ?? '',
            target: target?.toString() ?? '',
            regex: this.regex ?? null,
        };
    }
}
exports.GeneralAssertionBuilder = GeneralAssertionBuilder;
//# sourceMappingURL=assertion.js.map