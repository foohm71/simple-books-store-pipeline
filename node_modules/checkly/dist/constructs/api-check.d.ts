import { Check, CheckProps } from './check';
import { HttpHeader } from './http-header';
import { QueryParam } from './query-param';
import { Content, Entrypoint } from './construct';
import { Assertion as CoreAssertion, NumericAssertionBuilder, GeneralAssertionBuilder } from './internal/assertion';
type AssertionSource = 'STATUS_CODE' | 'JSON_BODY' | 'HEADERS' | 'TEXT_BODY' | 'RESPONSE_TIME';
export type Assertion = CoreAssertion<AssertionSource>;
export declare class AssertionBuilder {
    static statusCode(): NumericAssertionBuilder<AssertionSource>;
    static jsonBody(property?: string): GeneralAssertionBuilder<AssertionSource>;
    static headers(property?: string, regex?: string): GeneralAssertionBuilder<AssertionSource>;
    static textBody(property?: string): GeneralAssertionBuilder<AssertionSource>;
    /** @deprecated Use responseTime() instead */
    static responseTme(): NumericAssertionBuilder<AssertionSource>;
    static responseTime(): NumericAssertionBuilder<AssertionSource>;
}
export type BodyType = 'JSON' | 'FORM' | 'RAW' | 'GRAPHQL' | 'NONE';
export type HttpRequestMethod = 'get' | 'GET' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'head' | 'HEAD' | 'delete' | 'DELETE' | 'options' | 'OPTIONS';
export type IPFamily = 'IPv4' | 'IPv6';
export interface BasicAuth {
    username: string;
    password: string;
}
export type ApiCheckDefaultConfig = {
    url?: string;
    headers?: Array<HttpHeader>;
    queryParameters?: Array<QueryParam>;
    basicAuth?: BasicAuth;
    assertions?: Array<Assertion>;
};
export interface Request {
    url: string;
    method: HttpRequestMethod;
    ipFamily?: IPFamily;
    followRedirects?: boolean;
    skipSSL?: boolean;
    /**
     * Check the main Checkly documentation on assertions for specific values like regular expressions
     * and JSON path descriptors you can use in the "property" field.
     */
    assertions?: Array<Assertion>;
    body?: string;
    bodyType?: BodyType;
    headers?: Array<HttpHeader>;
    queryParameters?: Array<QueryParam>;
    basicAuth?: BasicAuth;
}
export interface ScriptDependency {
    path: string;
    content: string;
}
export interface ApiCheckProps extends CheckProps {
    /**
     *  Determines the request that the check is going to run.
     */
    request: Request;
    /**
     * A valid piece of Node.js code to run in the setup phase.
     * @deprecated use the "setupScript" property instead
     */
    localSetupScript?: string;
    /**
     * A valid piece of Node.js code to run in the setup phase.
     */
    setupScript?: Content | Entrypoint;
    /**
     * A valid piece of Node.js code to run in the teardown phase.
     * @deprecated use the "tearDownScript" property instead
     */
    localTearDownScript?: string;
    /**
     * A valid piece of Node.js code to run in the teardown phase.
     */
    tearDownScript?: Content | Entrypoint;
    /**
     * The response time in milliseconds where a check should be considered degraded.
     */
    degradedResponseTime?: number;
    /**
     * The response time in milliseconds where a check should be considered failing.
     */
    maxResponseTime?: number;
}
/**
 * Creates an API Check
 *
 * @remarks
 *
 * This class make use of the API Checks endpoints.
 */
export declare class ApiCheck extends Check {
    request: Request;
    localSetupScript?: string;
    localTearDownScript?: string;
    degradedResponseTime?: number;
    maxResponseTime?: number;
    private readonly setupScriptDependencies?;
    private readonly tearDownScriptDependencies?;
    private readonly setupScriptPath?;
    private readonly tearDownScriptPath?;
    /**
     * Constructs the API Check instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props check configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs-reference/#apicheck Read more in the docs}
     */
    constructor(logicalId: string, props: ApiCheckProps);
    static bundle(entrypoint: string, runtimeId?: string): {
        script: string;
        scriptPath: string;
        dependencies: ScriptDependency[];
    };
    synthesize(): {
        checkType: string;
        request: Request;
        localSetupScript: string | undefined;
        setupScriptPath: string | undefined;
        setupScriptDependencies: ScriptDependency[] | undefined;
        localTearDownScript: string | undefined;
        tearDownScriptPath: string | undefined;
        tearDownScriptDependencies: ScriptDependency[] | undefined;
        degradedResponseTime: number | undefined;
        maxResponseTime: number | undefined;
        name: string;
        activated: boolean | undefined;
        muted: boolean | undefined;
        shouldFail: boolean | undefined;
        runtimeId: string | undefined;
        locations: (keyof import("..").Region)[] | undefined;
        privateLocations: undefined;
        tags: string[] | undefined;
        frequency: number | undefined;
        frequencyOffset: number | undefined;
        groupId: import("./ref").Ref | undefined;
        environmentVariables: import("./key-value-pair").default[] | undefined;
        retryStrategy: import("./retry-strategy").RetryStrategy | null | undefined;
        doubleCheck: boolean | undefined;
        alertSettings: import("./alert-escalation-policy").AlertEscalation | undefined;
        useGlobalAlertSettings: boolean | undefined;
        runParallel: boolean | undefined;
        triggerIncident: {
            serviceId: import("./ref").Ref;
            severity: "MINOR" | "MEDIUM" | "MAJOR" | "CRITICAL";
            name: string;
            description: string;
            notifySubscribers: boolean;
        } | undefined;
    };
}
export {};
