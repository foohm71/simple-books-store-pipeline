"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookAlertChannelCodegen = exports.buildWebhookAlertChannelConfig = void 0;
const sourcegen_1 = require("../sourcegen");
const alert_channel_codegen_1 = require("./alert-channel-codegen");
const key_value_pair_codegen_1 = require("./key-value-pair-codegen");
const incidentio_alert_channel_codegen_1 = require("./incidentio-alert-channel-codegen");
const msteams_alert_channel_codegen_1 = require("./msteams-alert-channel-codegen");
const telegram_alert_channel_codegen_1 = require("./telegram-alert-channel-codegen");
const codegen_1 = require("./internal/codegen");
function buildWebhookAlertChannelConfig(program, genfile, context, builder, config) {
    builder.string('name', config.name);
    if (config.webhookType) {
        builder.string('webhookType', config.webhookType);
    }
    builder.string('url', config.url);
    if (config.template) {
        builder.string('template', config.template);
    }
    if (config.method) {
        builder.string('method', config.method);
    }
    if (config.headers) {
        const headers = config.headers;
        if (headers.length > 0) {
            builder.array('headers', builder => {
                for (const header of headers) {
                    builder.value((0, key_value_pair_codegen_1.valueForKeyValuePair)(program, genfile, context, header));
                }
            });
        }
    }
    if (config.queryParameters) {
        const queryParameters = config.queryParameters;
        if (queryParameters.length > 0) {
            builder.array('queryParameters', builder => {
                for (const param of queryParameters) {
                    builder.value((0, key_value_pair_codegen_1.valueForKeyValuePair)(program, genfile, context, param));
                }
            });
        }
    }
    if (config.webhookSecret) {
        builder.string('webhookSecret', config.webhookSecret);
    }
}
exports.buildWebhookAlertChannelConfig = buildWebhookAlertChannelConfig;
const construct = 'WebhookAlertChannel';
class WebhookAlertChannelCodegen extends codegen_1.Codegen {
    incidentioCodegen;
    msteamsCodegen;
    telegramCodegen;
    codegensByWebhookType;
    constructor(program) {
        super(program);
        this.incidentioCodegen = new incidentio_alert_channel_codegen_1.IncidentioAlertChannelCodegen(program);
        this.msteamsCodegen = new msteams_alert_channel_codegen_1.MSTeamsAlertChannelCodegen(program);
        this.telegramCodegen = new telegram_alert_channel_codegen_1.TelegramAlertChannelCodegen(program);
        this.codegensByWebhookType = {
            WEBHOOK_INCIDENTIO: this.incidentioCodegen,
            WEBHOOK_MSTEAMS: this.msteamsCodegen,
            WEBHOOK_TELEGRAM: this.telegramCodegen,
        };
    }
    describe(resource) {
        try {
            const { webhookType } = resource.config;
            if (webhookType) {
                const codegen = this.codegensByWebhookType[webhookType];
                if (codegen) {
                    return codegen.describe(resource);
                }
            }
        }
        catch (err) {
            if (err instanceof codegen_1.ImportSafetyViolation) {
                // The webhook contains unsupported data for its claimed type.
                // Fall back to the standard webhook alert channel which can handle
                // all subtypes.
            }
            else {
                throw err;
            }
        }
        return `Webhook Alert Channel: ${resource.config.name}`;
    }
    prepare(logicalId, resource, context) {
        try {
            const { webhookType } = resource.config;
            if (webhookType) {
                const codegen = this.codegensByWebhookType[webhookType];
                if (codegen) {
                    codegen.prepare(logicalId, resource, context);
                    return;
                }
            }
        }
        catch (err) {
            if (err instanceof codegen_1.ImportSafetyViolation) {
                // The webhook contains unsupported data for its claimed type.
                // Fall back to the standard webhook alert channel which can handle
                // all subtypes.
            }
            else {
                throw err;
            }
        }
        const { name } = resource.config;
        const filename = context.filePath('resources/alert-channels/webhook', name, {
            unique: true,
        });
        context.registerAlertChannel(resource.id, `${name} webhook`, this.program.generatedConstructFile(filename.fullPath));
    }
    gencode(logicalId, resource, context) {
        try {
            const { webhookType } = resource.config;
            if (webhookType) {
                const codegen = this.codegensByWebhookType[webhookType];
                if (codegen) {
                    codegen.gencode(logicalId, resource, context);
                    return;
                }
            }
        }
        catch (err) {
            if (err instanceof codegen_1.ImportSafetyViolation) {
                // The webhook contains unsupported data for its claimed type.
                // Fall back to the standard webhook alert channel which can handle
                // all subtypes.
            }
            else {
                throw err;
            }
        }
        const { id, file } = context.lookupAlertChannel(resource.id);
        file.namedImport(construct, 'checkly/constructs');
        file.section((0, sourcegen_1.decl)(id, builder => {
            builder.variable((0, sourcegen_1.expr)((0, sourcegen_1.ident)(construct), builder => {
                builder.new(builder => {
                    builder.string(logicalId);
                    builder.object(builder => {
                        buildWebhookAlertChannelConfig(this.program, file, context, builder, resource.config);
                        (0, alert_channel_codegen_1.buildAlertChannelProps)(builder, resource);
                    });
                });
            }));
            builder.export();
        }));
    }
}
exports.WebhookAlertChannelCodegen = WebhookAlertChannelCodegen;
//# sourceMappingURL=webhook-alert-channel-codegen.js.map