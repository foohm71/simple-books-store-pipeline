"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusPageCodegen = void 0;
const codegen_1 = require("./internal/codegen");
const sourcegen_1 = require("../sourcegen");
const status_page_service_codegen_1 = require("./status-page-service-codegen");
const construct = 'StatusPage';
class StatusPageCodegen extends codegen_1.Codegen {
    describe(resource) {
        return `Status Page: ${resource.name}`;
    }
    gencode(logicalId, resource, context) {
        const filePath = context.filePath('resources/status-pages', resource.name, {
            unique: true,
        });
        const file = this.program.generatedConstructFile(filePath.fullPath);
        file.namedImport(construct, 'checkly/constructs');
        file.section((0, sourcegen_1.expr)((0, sourcegen_1.ident)(construct), builder => {
            builder.new(builder => {
                builder.string(logicalId);
                builder.object(builder => {
                    builder.string('name', resource.name);
                    builder.string('url', resource.url);
                    builder.array('cards', builder => {
                        for (const card of resource.cards) {
                            builder.object(builder => {
                                builder.string('name', card.name);
                                builder.array('services', builder => {
                                    for (const service of card.services) {
                                        try {
                                            const serviceVariable = context.lookupStatusPageService(service.id);
                                            const id = context.importVariable(serviceVariable, file);
                                            builder.value(id);
                                        }
                                        catch {
                                            try {
                                                const serviceVariable = context.lookupFriendStatusPageService(service.id);
                                                const id = context.importFriendVariable(serviceVariable, file);
                                                builder.value(id);
                                            }
                                            catch {
                                                builder.value((0, status_page_service_codegen_1.valueForStatusPageServiceFromId)(file, service.id));
                                            }
                                        }
                                    }
                                });
                            });
                        }
                    });
                    if (resource.customDomain) {
                        builder.string('customDomain', resource.customDomain);
                    }
                    if (resource.logo) {
                        builder.string('logo', resource.logo);
                    }
                    if (resource.redirectTo) {
                        builder.string('redirectTo', resource.redirectTo);
                    }
                    if (resource.favicon) {
                        builder.string('favicon', resource.favicon);
                    }
                    if (resource.defaultTheme) {
                        builder.string('defaultTheme', resource.defaultTheme);
                    }
                });
            });
        }));
    }
}
exports.StatusPageCodegen = StatusPageCodegen;
//# sourceMappingURL=status-page-codegen.js.map