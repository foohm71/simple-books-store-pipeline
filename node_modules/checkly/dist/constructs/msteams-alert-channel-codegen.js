"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MSTeamsAlertChannelCodegen = void 0;
const codegen_1 = require("./internal/codegen");
const sourcegen_1 = require("../sourcegen");
const alert_channel_codegen_1 = require("./alert-channel-codegen");
const msteams_alert_channel_1 = require("./msteams-alert-channel");
const construct = 'MSTeamsAlertChannel';
class MSTeamsAlertChannelCodegen extends codegen_1.Codegen {
    validateSafety(resource) {
        const { config } = resource;
        if (config.method !== 'POST') {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'method' (expected 'POST')`);
        }
        if (config.headers !== undefined && config.headers.length !== 0) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'headers' (expected no value or an empty array)`);
        }
        if (config.queryParameters !== undefined && config.queryParameters.length !== 0) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'queryParameters' (expected no value or an empty array)`);
        }
        if (config.webhookSecret !== undefined) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'webhookSecret' (expected no value)`);
        }
    }
    describe(resource) {
        this.validateSafety(resource);
        return `Microsoft Teams Alert Channel: ${resource.config.name}`;
    }
    prepare(logicalId, resource, context) {
        this.validateSafety(resource);
        const { name } = resource.config;
        const filename = context.filePath('resources/alert-channels/ms-teams', name, {
            unique: true,
        });
        context.registerAlertChannel(resource.id, `${name} teams`, this.program.generatedConstructFile(filename.fullPath));
    }
    gencode(logicalId, resource, context) {
        this.validateSafety(resource);
        const { id, file } = context.lookupAlertChannel(resource.id);
        file.namedImport(construct, 'checkly/constructs');
        const { config } = resource;
        if (config.method !== 'POST') {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'method' (expected 'POST')`);
        }
        if (config.headers !== undefined && config.headers.length !== 0) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'headers' (expected no value or an empty array)`);
        }
        if (config.queryParameters !== undefined && config.queryParameters.length !== 0) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'queryParameters' (expected no value or an empty array)`);
        }
        if (config.webhookSecret) {
            throw new codegen_1.ImportSafetyViolation(`Unsupported value for property 'webhookSecret' (expected no value)`);
        }
        file.section((0, sourcegen_1.decl)(id, builder => {
            builder.variable((0, sourcegen_1.expr)((0, sourcegen_1.ident)(construct), builder => {
                builder.new(builder => {
                    builder.string(logicalId);
                    builder.object(builder => {
                        builder.string('name', config.name);
                        builder.string('url', config.url);
                        if (config.template) {
                            if (config.template !== msteams_alert_channel_1.MSTeamsAlertChannel.DEFAULT_PAYLOAD) {
                                builder.string('payload', config.template);
                            }
                        }
                        (0, alert_channel_codegen_1.buildAlertChannelProps)(builder, resource);
                    });
                });
            }));
            builder.export();
        }));
    }
}
exports.MSTeamsAlertChannelCodegen = MSTeamsAlertChannelCodegen;
//# sourceMappingURL=msteams-alert-channel-codegen.js.map