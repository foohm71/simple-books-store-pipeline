import { CheckConfigDefaults } from '../services/checkly-config-loader';
import { Parser } from '../services/check-parser/parser';
import { Construct } from './construct';
import type { Runtime } from '../rest/runtimes';
import { Check, AlertChannelSubscription, AlertChannel, CheckGroup, MaintenanceWindow, Dashboard, PrivateLocation, PrivateLocationCheckAssignment, PrivateLocationGroupAssignment, StatusPage, StatusPageService } from './';
import { ResourceSync } from '../rest/projects';
import { PrivateLocationApi } from '../rest/private-locations';
import { FileLoader } from '../loader';
export interface ProjectProps {
    /**
     * Friendly name for your project.
     */
    name: string;
    /**
     * Git repository URL.
     */
    repoUrl?: string;
}
export interface ProjectData {
    check: Record<string, Check>;
    'check-group': Record<string, CheckGroup>;
    'alert-channel': Record<string, AlertChannel>;
    'alert-channel-subscription': Record<string, AlertChannelSubscription>;
    'maintenance-window': Record<string, MaintenanceWindow>;
    'private-location': Record<string, PrivateLocation>;
    'private-location-check-assignment': Record<string, PrivateLocationCheckAssignment>;
    'private-location-group-assignment': Record<string, PrivateLocationGroupAssignment>;
    dashboard: Record<string, Dashboard>;
    'status-page': Record<string, StatusPage>;
    'status-page-service': Record<string, StatusPageService>;
}
export declare class Project extends Construct {
    name: string;
    repoUrl?: string;
    logicalId: string;
    data: ProjectData;
    static readonly __checklyType = "project";
    /**
     * Constructs the Project instance
     *
     * @param logicalId unique project identifier
     * @param props project configuration properties
     */
    constructor(logicalId: string, props: ProjectProps);
    addResource(type: string, logicalId: string, resource: Construct): void;
    synthesize(addTestOnly?: boolean): {
        project: Pick<Project, 'logicalId' | 'name' | 'repoUrl'>;
        resources: Array<ResourceSync>;
    };
    getTestOnlyConstructs(): Construct[];
    getHeartbeatLogicalIds(): string[];
    private synthesizeRecord;
}
export interface ConstructExport {
    type: string;
    logicalId: string;
    filePath: string;
    exportName: string;
}
export declare class Session {
    static loader: FileLoader;
    static project?: Project;
    static basePath?: string;
    static checkDefaults?: CheckConfigDefaults;
    static browserCheckDefaults?: CheckConfigDefaults;
    static multiStepCheckDefaults?: CheckConfigDefaults;
    static checkFilePath?: string;
    static checkFileAbsolutePath?: string;
    static availableRuntimes: Record<string, Runtime>;
    static defaultRuntimeId?: string;
    static verifyRuntimeDependencies: boolean;
    static loadingChecklyConfigFile: boolean;
    static checklyConfigFileConstructs?: Construct[];
    static privateLocations: PrivateLocationApi[];
    static parsers: Map<string, Parser>;
    static constructExports: ConstructExport[];
    static loadFile<T = unknown>(filePath: string): Promise<T>;
    static registerConstruct(construct: Construct): void;
    static validateCreateConstruct(construct: Construct): void;
    static getPrivateLocations(): Promise<PrivateLocationApi[]>;
    static getRuntime(runtimeId?: string): Runtime | undefined;
    static getParser(runtime: Runtime): Parser;
}
