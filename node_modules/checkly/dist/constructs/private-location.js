"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivateLocation = exports.PrivateLocationRef = void 0;
const construct_1 = require("./construct");
const project_1 = require("./project");
const validator_error_1 = require("./validator-error");
/**
 * Creates a reference to an existing Private Location.
 *
 * References link existing resources to a project without managing them.
 */
class PrivateLocationRef extends construct_1.Construct {
    constructor(logicalId, physicalId) {
        super(PrivateLocation.__checklyType, logicalId, physicalId, false);
        project_1.Session.registerConstruct(this);
    }
    synthesize() {
        return null;
    }
}
exports.PrivateLocationRef = PrivateLocationRef;
/**
 * Creates a Private Location
 *
 * @remarks
 *
 * This class make use of the Private Location endpoints.
 *
 * {@link https://www.checklyhq.com/docs/cli/constructs-reference/#privatelocation Read more in the docs}
 */
class PrivateLocation extends construct_1.Construct {
    name;
    slugName;
    icon;
    proxyUrl;
    static __checklyType = 'private-location';
    /**
     * Constructs the Private Location instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props private location configuration properties
     */
    constructor(logicalId, props) {
        super(PrivateLocation.__checklyType, logicalId);
        this.name = props.name;
        this.slugName = props.slugName;
        this.icon = props.icon;
        this.proxyUrl = props.proxyUrl;
        if (!/^((?!((us(-gov)?|ap|ca|cn|eu|sa|af|me)-(central|(north|south)?(east|west)?)-\d+))[a-zA-Z0-9-]{1,30})$/
            .test(this.slugName)) {
            throw new validator_error_1.ValidationError(`The "slugName" must differ from all AWS locations. (slugName='${this.slugName}')`);
        }
        project_1.Session.registerConstruct(this);
    }
    static fromId(id) {
        return new PrivateLocationRef(`private-location-${id}`, id);
    }
    allowInChecklyConfig() {
        return true;
    }
    synthesize() {
        return {
            name: this.name,
            slugName: this.slugName,
            icon: this.icon,
            proxyUrl: this.proxyUrl,
        };
    }
}
exports.PrivateLocation = PrivateLocation;
//# sourceMappingURL=private-location.js.map