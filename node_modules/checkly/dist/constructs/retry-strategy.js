"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryStrategyBuilder = void 0;
class RetryStrategyBuilder {
    static DEFAULT_BASE_BACKOFF_SECONDS = 60;
    static DEFAULT_MAX_RETRIES = 2;
    static DEFAULT_MAX_DURATION_SECONDS = 60 * 10;
    static DEFAULT_SAME_REGION = true;
    /**
     * Each retry is run with the same backoff between attempts.
     */
    static fixedStrategy(options) {
        return RetryStrategyBuilder.retryStrategy('FIXED', options);
    }
    /**
     * The delay between retries increases linearly
     *
     * The delay between retries is calculated using `baseBackoffSeconds * attempt`.
     * For example, retries will be run with a backoff of 10s, 20s, 30s, and so on.
     */
    static linearStrategy(options) {
        return RetryStrategyBuilder.retryStrategy('LINEAR', options);
    }
    /**
     * The delay between retries increases exponentially
     *
     * The delay between retries is calculated using `baseBackoffSeconds ^ attempt`.
     * For example, retries will be run with a backoff of 10s, 100s, 1000s, and so on.
     */
    static exponentialStrategy(options) {
        return RetryStrategyBuilder.retryStrategy('EXPONENTIAL', options);
    }
    /**
     * No retries are performed.
     */
    static noRetries() {
        return RetryStrategyBuilder.retryStrategy('NO_RETRIES');
    }
    static retryStrategy(type, options) {
        return {
            type,
            baseBackoffSeconds: options?.baseBackoffSeconds ?? RetryStrategyBuilder.DEFAULT_BASE_BACKOFF_SECONDS,
            maxRetries: options?.maxRetries ?? RetryStrategyBuilder.DEFAULT_MAX_RETRIES,
            maxDurationSeconds: options?.maxDurationSeconds ?? RetryStrategyBuilder.DEFAULT_MAX_DURATION_SECONDS,
            sameRegion: options?.sameRegion ?? RetryStrategyBuilder.DEFAULT_SAME_REGION,
        };
    }
}
exports.RetryStrategyBuilder = RetryStrategyBuilder;
//# sourceMappingURL=retry-strategy.js.map