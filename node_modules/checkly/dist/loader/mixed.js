"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MixedFileLoader = void 0;
const loader_1 = require("./loader");
class MixedFileLoader extends loader_1.FileLoader {
    loaders;
    constructor(...loaders) {
        super();
        this.loaders = new Set(loaders);
    }
    isAuthoritativeFor(filePath) {
        for (const loader of this.loaders) {
            if (loader.isAuthoritativeFor(filePath)) {
                return true;
            }
        }
        return false;
    }
    async loadFile(filePath) {
        for (const loader of this.loaders) {
            if (loader.isAuthoritativeFor(filePath)) {
                try {
                    return await loader.loadFile(filePath);
                }
                catch (err) {
                    if (err instanceof loader_1.UnsupportedFileLoaderError) {
                        // We'll always get the same error. Just remove the loader to
                        // avoid calling it again.
                        this.loaders.delete(loader);
                        continue;
                    }
                    throw err;
                }
            }
        }
        throw new loader_1.UnsupportedFileLoaderError(`Unable to find authoritative loader for file '${filePath}'`);
    }
}
exports.MixedFileLoader = MixedFileLoader;
//# sourceMappingURL=mixed.js.map