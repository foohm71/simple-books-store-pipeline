"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JitiFileLoader = exports.InitializedJitiFileLoaderState = exports.FailedJitiFileLoaderState = exports.UninitializedJitiFileLoaderState = void 0;
const loader_1 = require("./loader");
const match_1 = require("./match");
class UninitializedJitiFileLoaderState extends loader_1.FileLoader {
    init;
    async loadFile(filePath) {
        this.init ??= (async () => {
            try {
                const jitiExports = await import('jiti');
                const jiti = jitiExports.createJiti(__filename);
                JitiFileLoader.state = new InitializedJitiFileLoaderState(jiti);
            }
            catch (err) {
                JitiFileLoader.state = new FailedJitiFileLoaderState(err);
            }
        })();
        await this.init;
        return await JitiFileLoader.state.loadFile(filePath);
    }
}
exports.UninitializedJitiFileLoaderState = UninitializedJitiFileLoaderState;
class FailedJitiFileLoaderState extends loader_1.FileLoader {
    error;
    constructor(error) {
        super();
        this.error = error;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async loadFile(filePath) {
        throw new loader_1.UnsupportedFileLoaderError('JitiFileLoader is not supported', {
            cause: this.error,
        });
    }
}
exports.FailedJitiFileLoaderState = FailedJitiFileLoaderState;
class InitializedJitiFileLoaderState extends loader_1.FileLoader {
    jiti;
    constructor(jiti) {
        super();
        this.jiti = jiti;
    }
    async loadFile(filePath) {
        const moduleExports = await this.jiti.import(filePath);
        return moduleExports;
    }
}
exports.InitializedJitiFileLoaderState = InitializedJitiFileLoaderState;
class JitiFileLoader extends loader_1.FileLoader {
    static state = new UninitializedJitiFileLoaderState();
    constructor(options) {
        super({
            match: match_1.FileMatch.standardFiles().complement(),
            ...options,
        });
    }
    async loadFile(filePath) {
        return JitiFileLoader.state.loadFile(filePath);
    }
}
exports.JitiFileLoader = JitiFileLoader;
//# sourceMappingURL=jiti.js.map