import { FileLoader, FileLoaderOptions } from './loader';
interface Jiti {
    import<T = unknown>(id: string, opts?: {
        default?: true;
    }): Promise<T>;
}
export declare class UninitializedJitiFileLoaderState extends FileLoader {
    init?: Promise<void>;
    loadFile<T = unknown>(filePath: string): Promise<T>;
}
export declare class FailedJitiFileLoaderState extends FileLoader {
    error: Error;
    constructor(error: Error);
    loadFile<T = unknown>(filePath: string): Promise<T>;
}
export declare class InitializedJitiFileLoaderState extends FileLoader {
    jiti: Jiti;
    constructor(jiti: Jiti);
    loadFile<T = unknown>(filePath: string): Promise<T>;
}
export type JitiFileLoaderOptions = FileLoaderOptions;
export declare class JitiFileLoader extends FileLoader {
    static state: FileLoader;
    constructor(options?: JitiFileLoaderOptions);
    loadFile<T = unknown>(filePath: string): Promise<T>;
}
export {};
