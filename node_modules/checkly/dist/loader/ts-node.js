"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TSNodeFileLoader = exports.InitializedTSNodeFileLoaderState = exports.FailedTSNodeFileLoaderState = exports.UninitializedTSNodeFileLoaderState = void 0;
const loader_1 = require("./loader");
const match_1 = require("./match");
class UninitializedTSNodeFileLoaderState extends loader_1.FileLoader {
    init;
    async loadFile(filePath) {
        this.init ??= (async () => {
            try {
                const tsNodeExports = await import('ts-node');
                const service = tsNodeExports.register({
                    moduleTypes: {
                        '**/*': 'cjs',
                    },
                    compilerOptions: {
                        module: 'CommonJS',
                    },
                });
                TSNodeFileLoader.state = new InitializedTSNodeFileLoaderState(service);
            }
            catch (err) {
                TSNodeFileLoader.state = new FailedTSNodeFileLoaderState(err);
            }
        })();
        await this.init;
        return await TSNodeFileLoader.state.loadFile(filePath);
    }
}
exports.UninitializedTSNodeFileLoaderState = UninitializedTSNodeFileLoaderState;
class FailedTSNodeFileLoaderState extends loader_1.FileLoader {
    error;
    constructor(error) {
        super();
        this.error = error;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async loadFile(filePath) {
        throw new loader_1.UnsupportedFileLoaderError('TSNodeFileLoader is not supported', {
            cause: this.error,
        });
    }
}
exports.FailedTSNodeFileLoaderState = FailedTSNodeFileLoaderState;
class InitializedTSNodeFileLoaderState extends loader_1.FileLoader {
    service;
    constructor(service) {
        super();
        this.service = service;
    }
    async loadFile(filePath) {
        try {
            this.service.enabled(true);
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            const moduleExports = require(filePath);
            return moduleExports;
        }
        catch (err) {
            if (err.message?.includes('Unable to compile TypeScript')) {
                throw new Error(`Unable to load file '${filePath}' with 'ts-node' (hint: consider installing 'jiti' for improved TypeScript support)\n${err.stack}`, {
                    cause: err,
                });
            }
            throw err;
        }
        finally {
            this.service.enabled(false);
        }
    }
}
exports.InitializedTSNodeFileLoaderState = InitializedTSNodeFileLoaderState;
class TSNodeFileLoader extends loader_1.FileLoader {
    static state = new UninitializedTSNodeFileLoaderState();
    constructor(options) {
        super({
            match: match_1.FileMatch.standardFiles().complement(),
            ...options,
        });
    }
    async loadFile(filePath) {
        return TSNodeFileLoader.state.loadFile(filePath);
    }
}
exports.TSNodeFileLoader = TSNodeFileLoader;
//# sourceMappingURL=ts-node.js.map