import { FileMatch } from './match';
export interface FileLoaderOptions {
    match?: FileMatch;
}
export declare abstract class FileLoader {
    protected fileMatcher: FileMatch;
    constructor(options?: FileLoaderOptions);
    /**
     * Checks whether the FileLoader can be used for a file path.
     *
     * @param filePath The file path to evaluate.
     * @returns Whether the FileLoader is authoritative for the file path.
     */
    isAuthoritativeFor(filePath: string): boolean;
    /**
     * Loads a file.
     *
     * @param filePath The path to load the file from.
     * @returns The unmodified exports of the file.
     */
    abstract loadFile<T = unknown>(filePath: string): Promise<T>;
}
/**
 * Error thrown when a FileLoader is authoritative for a file path but
 * fails to load it.
 */
export declare class UnsupportedFileLoaderError extends Error {
    constructor(message?: string, options?: ErrorOptions);
}
