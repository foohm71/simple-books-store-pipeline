"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.performCommitAction = exports.confirmCommit = void 0;
const core_1 = require("@oclif/core");
const prompts_1 = __importDefault(require("prompts"));
const log_symbols_1 = __importDefault(require("log-symbols"));
const chalk_1 = __importDefault(require("chalk"));
const api = __importStar(require("../../rest/api"));
const authCommand_1 = require("../authCommand");
const common_messages_1 = __importDefault(require("../../messages/common-messages"));
const util_1 = require("../../services/util");
const checkly_config_loader_1 = require("../../services/checkly-config-loader");
class ImportCommitCommand extends authCommand_1.AuthCommand {
    static hidden = false;
    static description = 'Permanently commit imported resources into your project.';
    static flags = {
        config: core_1.Flags.string({
            char: 'c',
            description: common_messages_1.default.configFile,
        }),
    };
    async run() {
        const { flags } = await this.parse(ImportCommitCommand);
        const { config: configFilename, } = flags;
        const { configDirectory, configFilenames } = (0, util_1.splitConfigFilePath)(configFilename);
        const { config: checklyConfig, } = await (0, checkly_config_loader_1.loadChecklyConfig)(configDirectory, configFilenames);
        const { logicalId, } = checklyConfig;
        const { data } = await api.projects.findImportPlans(logicalId, {
            onlyUncommitted: true,
        });
        // Uncommitted plans also include unapplied plans, filter them out.
        const uncommittedPlans = data.filter(plan => {
            return plan.appliedAt;
        });
        if (uncommittedPlans.length === 0) {
            this.style.fatal(`No plans available to commit.`);
            return;
        }
        const plan = await this.#selectPlan(uncommittedPlans);
        await performCommitAction.call(this, plan);
    }
    async #selectPlan(plans) {
        const choices = plans.map((plan, index) => ({
            title: `Plan #${index + 1} from ${new Date(plan.createdAt)}`,
            value: plan.id,
            description: `ID: ${plan.id}`,
        }));
        choices.unshift({
            title: 'Exit without committing',
            value: 'exit',
            description: 'No changes will be made.',
        });
        const plansById = plans.reduce((m, plan) => m.set(plan.id, plan), new Map());
        const { planId } = await (0, prompts_1.default)({
            name: 'planId',
            type: 'select',
            message: `Found ${plans.length} applied plan(s). Which one to commit?`,
            choices,
        });
        this.log();
        if (planId === 'exit' || planId === undefined) {
            this.log('Exiting without making any changes.');
            this.exit(0);
        }
        const plan = plansById.get(planId);
        if (plan === undefined) {
            throw new Error('Bug: plan ID missing from plan map');
        }
        return plan;
    }
}
exports.default = ImportCommitCommand;
async function confirmCommit() {
    const { commit } = await (0, prompts_1.default)({
        name: 'commit',
        type: 'confirm',
        message: 'Would you like to commit the plan now?',
    });
    this.log();
    if (commit) {
        return true;
    }
    this.log(`\
  To commit your plan at a later time, please run:

    ${chalk_1.default.green('npx checkly import commit')}

  To cancel the plan, run:

    ${chalk_1.default.green('npx checkly import cancel')}
`);
    return false;
}
exports.confirmCommit = confirmCommit;
async function performCommitAction(plan) {
    this.style.actionStart('Committing plan');
    try {
        await api.projects.commitImportPlan(plan.id);
        this.style.actionSuccess();
    }
    catch (err) {
        this.style.actionFailure();
        throw err;
    }
    this.log(`${log_symbols_1.default.success} ${chalk_1.default.bold('Your import plan has been committed!')}`);
    this.log();
    this.log(`\
  The underlying resources are now fully managed by the Checkly CLI the same
  way as any other CLI-native resource, and the import process is finished.

  Enjoy!
`);
}
exports.performCommitAction = performCommitAction;
//# sourceMappingURL=commit.js.map