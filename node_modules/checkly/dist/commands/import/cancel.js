"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const prompts_1 = __importDefault(require("prompts"));
const api = __importStar(require("../../rest/api"));
const authCommand_1 = require("../authCommand");
const common_messages_1 = __importDefault(require("../../messages/common-messages"));
const util_1 = require("../../services/util");
const checkly_config_loader_1 = require("../../services/checkly-config-loader");
class ImportCancelCommand extends authCommand_1.AuthCommand {
    static hidden = false;
    static description = 'Cancels an ongoing import plan that has not been committed yet.';
    static flags = {
        config: core_1.Flags.string({
            char: 'c',
            description: common_messages_1.default.configFile,
        }),
        all: core_1.Flags.boolean({
            description: 'Cancel all plans.',
            default: false,
        }),
    };
    async run() {
        const { flags } = await this.parse(ImportCancelCommand);
        const { config: configFilename, all, } = flags;
        const { configDirectory, configFilenames } = (0, util_1.splitConfigFilePath)(configFilename);
        const { config: checklyConfig, } = await (0, checkly_config_loader_1.loadChecklyConfig)(configDirectory, configFilenames);
        const { logicalId, } = checklyConfig;
        const { data: cancelablePlans } = await api.projects.findImportPlans(logicalId, {
            onlyUncommitted: true,
        });
        if (cancelablePlans.length === 0) {
            this.style.fatal(`No plans available to cancel.`);
            return;
        }
        const plans = all
            ? cancelablePlans
            : await this.#selectPlans(cancelablePlans);
        this.style.actionStart('Canceling plan(s)');
        try {
            for (const plan of plans) {
                await api.projects.cancelImportPlan(plan.id);
                this.style.shortSuccess(`Canceled plan ${plan.id}`);
            }
            this.style.actionSuccess();
        }
        catch (err) {
            this.style.actionFailure();
            throw err;
        }
    }
    async #selectPlans(plans) {
        const choices = plans.map((plan, index) => ({
            title: `Plan #${index + 1} from ${new Date(plan.createdAt)}`,
            value: plan.id,
            description: `ID: ${plan.id}`,
        }));
        choices.unshift({
            title: 'Exit without canceling',
            value: 'exit',
            description: 'No changes will be made.',
        });
        if (plans.length > 0) {
            choices.push({
                title: 'Cancel all plans',
                value: 'all',
                description: 'All uncommitted plans will be canceled.',
            });
        }
        const plansById = plans.reduce((m, plan) => m.set(plan.id, plan), new Map());
        const { planId } = await (0, prompts_1.default)({
            name: 'planId',
            type: 'select',
            message: `Found ${plans.length} cancelable plan(s). Which one to cancel?`,
            choices,
        });
        this.log();
        if (planId === 'exit' || planId === undefined) {
            this.log('Exiting without making any changes.');
            this.exit(0);
        }
        if (planId === 'all') {
            return plans;
        }
        const plan = plansById.get(planId);
        if (plan === undefined) {
            throw new Error('Bug: plan ID missing from plan map');
        }
        return [plan];
    }
}
exports.default = ImportCancelCommand;
//# sourceMappingURL=cancel.js.map