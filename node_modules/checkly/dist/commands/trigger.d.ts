import { AuthCommand } from './authCommand';
import type { Region } from '..';
import { RunLocation, PrivateRunLocation } from '../services/abstract-check-runner';
import { ReporterType } from '../reporters/reporter';
export default class Trigger extends AuthCommand {
    static coreCommand: boolean;
    static hidden: boolean;
    static description: string;
    static flags: {
        location: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        'private-location': import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        tags: import("@oclif/core/interfaces").OptionFlag<string[] | undefined, import("@oclif/core/interfaces").CustomOptions>;
        config: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        timeout: import("@oclif/core/interfaces").OptionFlag<number, import("@oclif/core/interfaces").CustomOptions>;
        verbose: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        'fail-on-no-matching': import("@oclif/core/interfaces").BooleanFlag<boolean>;
        reporter: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        env: import("@oclif/core/interfaces").OptionFlag<string[], import("@oclif/core/interfaces").CustomOptions>;
        'env-file': import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        record: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        'test-session-name': import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        retries: import("@oclif/core/interfaces").OptionFlag<number | undefined, import("@oclif/core/interfaces").CustomOptions>;
    };
    run(): Promise<void>;
    prepareRunLocation(configOptions?: {
        runLocation?: keyof Region;
        privateRunLocation?: string;
    }, cliFlags?: {
        runLocation?: keyof Region;
        privateRunLocation?: string;
    }): Promise<RunLocation>;
    preparePrivateRunLocation(privateLocationSlugName: string): Promise<PrivateRunLocation>;
    prepareVerboseFlag(verboseFlag?: boolean, cliVerboseFlag?: boolean): boolean;
    prepareFailOnNoMatching(failOnNoMatchingFlag?: boolean, cliFailOnNoMatchingFlag?: boolean): boolean;
    prepareReportersTypes(reporterFlag: ReporterType, cliReporters?: ReporterType[]): ReporterType[];
    prepareTestRetryStrategy(retries?: number, configRetries?: number): import("../constructs").RetryStrategy | null;
}
