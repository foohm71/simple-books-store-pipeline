"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = __importDefault(require("prompts"));
const api = __importStar(require("../../rest/api"));
const core_1 = require("@oclif/core");
const authCommand_1 = require("../authCommand");
class EnvAdd extends authCommand_1.AuthCommand {
    static hidden = false;
    static description = 'Add environment variable via "checkly env add <key> <value>".';
    static flags = {
        locked: core_1.Flags.boolean({
            char: 'l',
            description: 'Indicate that the environment variable will be locked.',
            default: false,
        }),
        secret: core_1.Flags.boolean({
            char: 's',
            description: 'Indicate that the environment variable will be secret.',
            default: false,
            exclusive: ['locked'],
        }),
    };
    static args = {
        key: core_1.Args.string({
            name: 'arguments',
            required: true,
            description: 'Environment variable key.',
        }),
        value: core_1.Args.string({
            name: 'arguments',
            required: false,
            description: 'Environment variable value.',
        }),
    };
    async run() {
        const { flags, args } = await this.parse(EnvAdd);
        const { locked, secret } = flags;
        const envVariableName = args.key;
        let envValue = '';
        // check if env variable exists
        if (args.value) {
            envValue = args.value;
        }
        else {
            const response = await (0, prompts_1.default)({
                type: 'password',
                name: 'value',
                message: `What is the value of ${envVariableName}?`,
            });
            envValue = response.value;
        }
        try {
            await api.environmentVariables.add(envVariableName, envValue, locked, secret);
            this.log(secret
                ? `Secret environment variable ${envVariableName} added.`
                : `Environment variable ${envVariableName} added.`);
        }
        catch (err) {
            if (err?.response?.status === 409) {
                throw new Error(`Environment variable ${envVariableName} already exists.`);
            }
            throw err;
        }
    }
}
exports.default = EnvAdd;
//# sourceMappingURL=add.js.map