import { type AxiosInstance } from 'axios';
import type { GitInformation } from '../services/util';
export interface Project {
    name: string;
    logicalId: string;
    repoUrl?: string;
}
type ProjectResponse = Project & {
    id: string;
    created_at: string;
};
export interface Change {
    logicalId: string;
    physicalId?: string | number;
    type: string;
    action: string;
}
export interface ResourceSync {
    logicalId: string;
    physicalId?: string | number;
    type: string;
    member: boolean;
    payload: any;
}
export interface AlertChannelFriendResource {
    type: 'alert-channel';
    logicalId: string;
    physicalId: number;
}
export interface CheckGroupFriendResource {
    type: 'check-group';
    logicalId: string;
    physicalId: number;
}
export interface PrivateLocationFriendResource {
    type: 'private-location';
    logicalId: string;
    physicalId: string;
}
export interface StatusPageServiceFriendResource {
    type: 'status-page-service';
    logicalId: string;
    physicalId: string;
}
export type FriendResourceSync = AlertChannelFriendResource | CheckGroupFriendResource | PrivateLocationFriendResource | StatusPageServiceFriendResource;
export interface AuxiliaryResourceSync {
    physicalId?: string | number;
    type: string;
    payload: any;
}
export interface ProjectSync {
    project: Project;
    resources: Array<ResourceSync>;
    repoInfo: GitInformation | null;
}
export interface ProjectDeployResponse {
    project: Project;
    diff: Array<Change>;
}
export interface ImportPlanFilter {
    type: 'include' | 'exclude';
    resource?: {
        type: string;
        physicalId?: string | number;
    };
}
export interface ImportPlanFriend {
    type: string;
    logicalId: string;
}
export interface ImportPlanOptions {
    preview?: boolean;
    filters?: ImportPlanFilter[];
    friends?: ImportPlanFriend[];
}
export interface ImportPlanChanges {
    resources: ResourceSync[];
    friends?: FriendResourceSync[];
    auxiliary?: AuxiliaryResourceSync[];
}
export interface ImportPlan {
    id: string;
    createdAt: string;
    appliedAt?: string;
    committedAt?: string;
    changes?: ImportPlanChanges;
}
export declare class ProjectNotFoundError extends Error {
}
declare class Projects {
    api: AxiosInstance;
    constructor(api: AxiosInstance);
    getAll(): Promise<import("axios").AxiosResponse<ProjectResponse[], any>>;
    get(id: string): Promise<import("axios").AxiosResponse<ProjectResponse, any>>;
    create(project: Project): Promise<import("axios").AxiosResponse<any, any>>;
    deleteProject(logicalId: string): Promise<import("axios").AxiosResponse<any, any>>;
    deploy(resources: ProjectSync, { dryRun, scheduleOnDeploy }?: {
        dryRun?: boolean | undefined;
        scheduleOnDeploy?: boolean | undefined;
    }): Promise<import("axios").AxiosResponse<ProjectDeployResponse, any>>;
    createImportPlan(logicalId: string, options?: ImportPlanOptions): Promise<import("axios").AxiosResponse<ImportPlan, any>>;
    findImportPlans(logicalId: string, { onlyUnapplied, onlyUncommitted }?: {
        onlyUnapplied?: boolean | undefined;
        onlyUncommitted?: boolean | undefined;
    }): Promise<import("axios").AxiosResponse<ImportPlan[], any>>;
    listImportPlans({ onlyUnapplied, onlyUncommitted }?: {
        onlyUnapplied?: boolean | undefined;
        onlyUncommitted?: boolean | undefined;
    }): Promise<import("axios").AxiosResponse<ImportPlan[], any>>;
    cancelImportPlan(importPlanId: string): Promise<import("axios").AxiosResponse<void, any>>;
    applyImportPlan(importPlanId: string): Promise<import("axios").AxiosResponse<void, any>>;
    commitImportPlan(importPlanId: string): Promise<import("axios").AxiosResponse<void, any>>;
}
export default Projects;
