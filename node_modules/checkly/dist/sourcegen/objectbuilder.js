"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectValueBuilder = exports.object = void 0;
const arraybuilder_1 = require("./arraybuilder");
const boolean_1 = require("./boolean");
const exprbuilder_1 = require("./exprbuilder");
const identifier_1 = require("./identifier");
const null_1 = require("./null");
const number_1 = require("./number");
const object_1 = require("./object");
const string_1 = require("./string");
const undefined_1 = require("./undefined");
function object(build, options) {
    const builder = new ObjectValueBuilder(options);
    build(builder);
    return builder.build();
}
exports.object = object;
class ObjectValueBuilder {
    #properties = new Map();
    #valueOptions;
    #implicitOrder = true;
    #implicitOrderValue = 0;
    #implicitOrderStep = 100;
    constructor(options) {
        this.#valueOptions = {
            ...options,
        };
        if (options?.implicitOrder !== undefined) {
            this.#implicitOrder = options.implicitOrder;
        }
        if (options?.implicitOrderStart !== undefined) {
            this.#implicitOrderValue = options.implicitOrderStart;
        }
        if (options?.implicitOrderStep !== undefined) {
            this.#implicitOrderStep = options.implicitOrderStep;
        }
    }
    string(name, value, options) {
        try {
            return this.value(name, new string_1.StringValue(value), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (string): ${cause}`, { cause });
        }
    }
    boolean(name, value, options) {
        try {
            return this.value(name, new boolean_1.BooleanValue(value), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (boolean): ${cause}`, { cause });
        }
    }
    number(name, value, options) {
        try {
            return this.value(name, new number_1.NumberValue(value), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (number): ${cause}`, { cause });
        }
    }
    null(name, options) {
        try {
            return this.value(name, new null_1.NullValue(), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (null): ${cause}`, { cause });
        }
    }
    undefined(name, options) {
        try {
            return this.value(name, new undefined_1.UndefinedValue(), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (undefined): ${cause}`, { cause });
        }
    }
    ident(name, value, options) {
        try {
            return this.value(name, new identifier_1.IdentifierValue(value), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (identifier): ${cause}`, { cause });
        }
    }
    array(name, build, options) {
        try {
            return this.value(name, (0, arraybuilder_1.array)(build), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (array): ${cause}`, { cause });
        }
    }
    object(name, build, options) {
        try {
            return this.value(name, object(build), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (object): ${cause}`, { cause });
        }
    }
    expr(name, context, build, options) {
        try {
            return this.value(name, (0, exprbuilder_1.expr)(context, build), options);
        }
        catch (cause) {
            throw new Error(`Failed to set object property '${name}' (expr): ${cause}`, { cause });
        }
    }
    value(name, value, options) {
        if (options?.order === undefined && this.#implicitOrder) {
            options = {
                ...options,
                order: this.#implicitOrderValue,
            };
            this.#implicitOrderValue += this.#implicitOrderStep;
        }
        this.#properties.set(name, new object_1.ObjectProperty(name, value, options));
        return this;
    }
    build() {
        return new object_1.ObjectValue([...this.#properties.values()], this.#valueOptions);
    }
}
exports.ObjectValueBuilder = ObjectValueBuilder;
//# sourceMappingURL=objectbuilder.js.map