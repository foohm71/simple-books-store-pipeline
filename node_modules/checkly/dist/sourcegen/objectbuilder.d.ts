import { ArrayValueBuilder } from './arraybuilder';
import { ExpressionValueBuilder } from './exprbuilder';
import { ObjectPropertyOptions, ObjectValue, ObjectValueOptions } from './object';
import { Value } from './value';
export interface ObjectValueBuilderOptions extends ObjectValueOptions {
    implicitOrder?: boolean;
    implicitOrderStart?: number;
    implicitOrderStep?: number;
}
export declare function object(build: (builder: ObjectValueBuilder) => void, options?: ObjectValueBuilderOptions): ObjectValue;
export declare class ObjectValueBuilder {
    #private;
    constructor(options?: ObjectValueBuilderOptions);
    string(name: string, value: string, options?: ObjectPropertyOptions): this;
    boolean(name: string, value: boolean, options?: ObjectPropertyOptions): this;
    number(name: string, value: number, options?: ObjectPropertyOptions): this;
    null(name: string, options?: ObjectPropertyOptions): this;
    undefined(name: string, options?: ObjectPropertyOptions): this;
    ident(name: string, value: string, options?: ObjectPropertyOptions): this;
    array(name: string, build: (builder: ArrayValueBuilder) => void, options?: ObjectPropertyOptions): this;
    object(name: string, build: (builder: ObjectValueBuilder) => void, options?: ObjectPropertyOptions): this;
    expr(name: string, context: Value, build: (builder: ExpressionValueBuilder) => void, options?: ObjectPropertyOptions): this;
    value(name: string, value: Value, options?: ObjectPropertyOptions): this;
    build(): ObjectValue;
}
