"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.docComment = exports.DocComment = exports.lineComment = exports.LineComment = exports.blockComment = exports.BlockComment = exports.Comment = exports.CommentValue = void 0;
const value_1 = require("./value");
class CommentValue extends value_1.Value {
    #comment;
    #value;
    #leading;
    #newline;
    constructor(comment, value, options) {
        super();
        this.#comment = comment;
        this.#value = value;
        this.#leading = options?.leading ?? false;
        this.#newline = options?.newline ?? false;
    }
    render(output) {
        if (this.#leading) {
            this.#comment.render(output);
            if (this.#newline) {
                output.endLine();
            }
            else {
                output.cosmeticWhitespace();
            }
            this.#value.render(output);
        }
        else {
            this.#value.render(output);
            if (this.#newline) {
                output.endLine();
            }
            else {
                output.cosmeticWhitespace();
            }
            this.#comment.render(output);
        }
    }
}
exports.CommentValue = CommentValue;
class Comment {
    comment;
    options;
    constructor(comment, options) {
        this.comment = comment;
        this.options = {
            stylized: true,
            ...options,
        };
    }
}
exports.Comment = Comment;
class BlockComment extends Comment {
    render(output) {
        if (this.options.stylized) {
            const lines = this.comment.split('\n');
            if (lines.length === 1) {
                output.append('/*');
                output.cosmeticWhitespace();
                output.append(this.comment);
                output.cosmeticWhitespace();
                output.append('*/');
            }
            else {
                output.append('/*');
                output.endLine();
                for (const line of lines) {
                    output.append(line);
                    output.endLine();
                }
                output.append('*/');
            }
        }
        else {
            output.append('/*');
            output.append(this.comment);
            output.append('*/');
        }
    }
}
exports.BlockComment = BlockComment;
function blockComment(comment, options) {
    return new BlockComment(comment, options);
}
exports.blockComment = blockComment;
class LineComment extends Comment {
    render(output) {
        const lines = this.comment.split('\n');
        for (const line of lines) {
            output.append('//');
            if (this.options.stylized) {
                if (line.length !== 0) {
                    output.cosmeticWhitespace();
                }
            }
            output.append(line);
            output.endLine();
        }
    }
}
exports.LineComment = LineComment;
function lineComment(comment, options) {
    return new LineComment(comment, options);
}
exports.lineComment = lineComment;
class DocComment extends Comment {
    render(output) {
        const lines = this.comment.split('\n');
        output.append('/**');
        output.endLine();
        for (const line of lines) {
            output.append(' * ');
            output.append(line);
            output.endLine();
        }
        output.append(' */');
    }
}
exports.DocComment = DocComment;
function docComment(comment, options) {
    return new DocComment(comment, options);
}
exports.docComment = docComment;
//# sourceMappingURL=comment.js.map