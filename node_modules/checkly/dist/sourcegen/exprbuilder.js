"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressionValueBuilder = exports.expr = void 0;
const argsbuilder_1 = require("./argsbuilder");
const expr_1 = require("./expr");
function expr(context, build) {
    const builder = new ExpressionValueBuilder(context);
    build(builder);
    return builder.build();
}
exports.expr = expr;
class ExpressionValueBuilder {
    #context;
    constructor(value) {
        this.#context = value;
    }
    new(build) {
        try {
            const builder = new argsbuilder_1.ArgumentsValueBuilder();
            build(builder);
            return this.context(new expr_1.NewExpressionValue(this.#context, builder.build()));
        }
        catch (cause) {
            throw new Error(`Failed to create 'new' expression: ${cause}`, { cause });
        }
    }
    call(build) {
        try {
            const builder = new argsbuilder_1.ArgumentsValueBuilder();
            build(builder);
            return this.context(new expr_1.CallExpressionValue(this.#context, builder.build()));
        }
        catch (cause) {
            throw new Error(`Failed to create 'call' expression: ${cause}`, { cause });
        }
    }
    member(property) {
        try {
            return this.context(new expr_1.MemberExpressionValue(this.#context, property));
        }
        catch (cause) {
            throw new Error(`Failed to create 'member' expression: ${cause}`, { cause });
        }
    }
    context(value) {
        this.#context = value;
        return this;
    }
    build() {
        return this.#context;
    }
}
exports.ExpressionValueBuilder = ExpressionValueBuilder;
//# sourceMappingURL=exprbuilder.js.map