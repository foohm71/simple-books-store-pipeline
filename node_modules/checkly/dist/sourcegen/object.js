"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectValue = exports.sortObjectPropertiesByOrderAndName = exports.sortObjectPropertiesByOrder = exports.sortObjectPropertiesByName = exports.ObjectProperty = void 0;
const value_1 = require("./value");
class ObjectProperty {
    name;
    value;
    options;
    constructor(name, value, options) {
        this.name = name;
        this.value = value;
        this.options = options;
    }
}
exports.ObjectProperty = ObjectProperty;
function sortObjectPropertiesByName(a, b) {
    if (a.name < b.name) {
        return -1;
    }
    if (a.name > b.name) {
        return 1;
    }
    return 0;
}
exports.sortObjectPropertiesByName = sortObjectPropertiesByName;
function sortObjectPropertiesByOrder(a, b) {
    const orderA = (a.options?.order ?? 0);
    const orderB = (b.options?.order ?? 0);
    if (orderA < orderB) {
        return -1;
    }
    if (orderA > orderB) {
        return 1;
    }
    return 0;
}
exports.sortObjectPropertiesByOrder = sortObjectPropertiesByOrder;
function sortObjectPropertiesByOrderAndName(a, b) {
    const result = sortObjectPropertiesByOrder(a, b);
    return result === 0 ? sortObjectPropertiesByName(a, b) : result;
}
exports.sortObjectPropertiesByOrderAndName = sortObjectPropertiesByOrderAndName;
class ObjectValue extends value_1.Value {
    value = [];
    options;
    constructor(value, options) {
        super();
        this.value = value;
        this.options = options;
    }
    isEmpty() {
        return this.value.length === 0;
    }
    render(output) {
        const sorter = this.options?.sort ?? sortObjectPropertiesByOrderAndName;
        const properties = [...this.value].sort(sorter);
        output.append('{');
        output.increaseIndent();
        for (const { name, value, options } of properties) {
            output.endLine({
                collapse: true,
            });
            if (options?.leadingComment) {
                options.leadingComment.render(output);
                output.endLine({
                    collapse: true,
                });
            }
            output.append(name);
            output.append(':');
            output.cosmeticWhitespace();
            value.render(output);
            output.append(',');
            if (options?.trailingComment) {
                output.cosmeticWhitespace();
                options.trailingComment.render(output);
                output.endLine({
                    collapse: true,
                });
            }
        }
        output.decreaseIndent();
        output.endLine();
        output.append('}');
    }
}
exports.ObjectValue = ObjectValue;
//# sourceMappingURL=object.js.map