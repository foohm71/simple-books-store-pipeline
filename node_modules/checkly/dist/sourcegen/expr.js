"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnaryExpressionValue = exports.BinaryExpressionValue = exports.MemberExpressionValue = exports.CallExpressionValue = exports.NewExpressionValue = exports.ExpressionValue = void 0;
const value_1 = require("./value");
class ExpressionValue extends value_1.Value {
}
exports.ExpressionValue = ExpressionValue;
class NewExpressionValue extends ExpressionValue {
    callee;
    args;
    constructor(callee, args) {
        super();
        this.callee = callee;
        this.args = args;
    }
    render(output) {
        output.append('new');
        output.significantWhitespace();
        this.callee.render(output);
        this.args.render(output);
    }
}
exports.NewExpressionValue = NewExpressionValue;
class CallExpressionValue extends ExpressionValue {
    callee;
    args;
    constructor(callee, args) {
        super();
        this.callee = callee;
        this.args = args;
    }
    render(output) {
        this.callee.render(output);
        this.args.render(output);
    }
}
exports.CallExpressionValue = CallExpressionValue;
class MemberExpressionValue extends ExpressionValue {
    object;
    property;
    constructor(object, property) {
        super();
        this.object = object;
        this.property = property;
    }
    render(output) {
        this.object.render(output);
        output.append('.');
        this.property.render(output); // @TODO: . vs ['']
    }
}
exports.MemberExpressionValue = MemberExpressionValue;
class BinaryExpressionValue extends ExpressionValue {
    left;
    right;
    op;
    constructor(left, right, op) {
        super();
        this.left = left;
        this.right = right;
        this.op = op;
    }
    render(output) {
        this.left.render(output);
        output.cosmeticWhitespace();
        output.append(this.op);
        output.cosmeticWhitespace();
        this.right.render(output);
    }
}
exports.BinaryExpressionValue = BinaryExpressionValue;
class UnaryExpressionValue extends ExpressionValue {
    value;
    op;
    constructor(value, op) {
        super();
        this.value = value;
        this.op = op;
    }
    render(output) {
        output.append(this.op);
        this.value.render(output);
    }
}
exports.UnaryExpressionValue = UnaryExpressionValue;
//# sourceMappingURL=expr.js.map