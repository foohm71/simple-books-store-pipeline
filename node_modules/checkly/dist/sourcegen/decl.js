"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrailingCommentDeclaration = exports.LeadingCommentDeclaration = exports.ExportDeclaration = exports.VariableDeclaration = exports.IdentifierDeclaration = exports.Declaration = void 0;
class Declaration {
}
exports.Declaration = Declaration;
class IdentifierDeclaration extends Declaration {
    identifier;
    constructor(identifier) {
        super();
        this.identifier = identifier;
    }
    render(output) {
        this.identifier.render(output);
    }
}
exports.IdentifierDeclaration = IdentifierDeclaration;
class VariableDeclaration extends Declaration {
    identifier;
    value;
    options;
    constructor(identifier, value, options) {
        super();
        this.identifier = identifier;
        this.value = value;
        this.options = options;
    }
    render(output) {
        if (this.options?.mutable) {
            output.append('let');
        }
        else {
            output.append('const');
        }
        output.significantWhitespace();
        this.identifier.render(output);
        output.cosmeticWhitespace();
        output.append('=');
        output.cosmeticWhitespace();
        this.value.render(output);
    }
}
exports.VariableDeclaration = VariableDeclaration;
class ExportDeclaration extends Declaration {
    decl;
    default;
    constructor(decl, options) {
        super();
        this.decl = decl;
        this.default = options?.default ?? false;
    }
    render(output) {
        output.append('export');
        output.significantWhitespace();
        if (this.default) {
            output.append('default');
            output.significantWhitespace();
        }
        this.decl.render(output);
    }
}
exports.ExportDeclaration = ExportDeclaration;
class LeadingCommentDeclaration extends Declaration {
    decl;
    comment;
    constructor(comment, decl) {
        super();
        this.decl = decl;
        this.comment = comment;
    }
    render(output) {
        this.comment.render(output);
        output.endLine({
            collapse: true,
        });
        this.decl.render(output);
    }
}
exports.LeadingCommentDeclaration = LeadingCommentDeclaration;
class TrailingCommentDeclaration extends Declaration {
    decl;
    comment;
    constructor(comment, decl) {
        super();
        this.decl = decl;
        this.comment = comment;
    }
    render(output) {
        this.decl.render(output);
        output.cosmeticWhitespace();
        this.comment.render(output);
    }
}
exports.TrailingCommentDeclaration = TrailingCommentDeclaration;
//# sourceMappingURL=decl.js.map