"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const indent_string_1 = __importDefault(require("indent-string"));
const chalk_1 = __importDefault(require("chalk"));
const abstract_list_1 = __importDefault(require("./abstract-list"));
const util_1 = require("./util");
const common_messages_1 = __importDefault(require("../messages/common-messages"));
class ListReporter extends abstract_list_1.default {
    onBegin(checks, testSessionId) {
        super.onBegin(checks, testSessionId);
        (0, util_1.printLn)(`Running ${this.numChecks} checks in ${this._runLocationString()}.`, 2, 1);
        this._printSummary();
    }
    onCheckInProgress(check, sequenceId) {
        super.onCheckInProgress(check, sequenceId);
        this._clearSummary();
        this._printSummary();
    }
    onSchedulingDelayExceeded() {
        super.onSchedulingDelayExceeded();
        this._clearSummary();
        this._printSummary();
    }
    onEnd() {
        this._clearSummary();
        this._printSummary();
        this._printTestSessionsUrl();
        if (!this.testSessionId) {
            this._printTip(common_messages_1.default.inlineTips.useRecordFlag);
        }
    }
    onCheckAttemptResult(sequenceId, checkResult, links) {
        super.onCheckAttemptResult(sequenceId, checkResult);
        this._clearSummary();
        (0, util_1.printLn)((0, util_1.formatCheckTitle)(util_1.CheckStatus.RETRIED, checkResult, { printRetryDuration: true }));
        (0, util_1.printLn)((0, indent_string_1.default)((0, util_1.formatCheckResult)(checkResult), 4), 2, 1);
        if (links) {
            (0, util_1.printLn)((0, indent_string_1.default)('View result: ' + chalk_1.default.underline.cyan(links.testResultLink), 4));
            if (links.testTraceLinks?.length) {
                // TODO: print all video files URLs
                (0, util_1.printLn)((0, indent_string_1.default)('View trace : ' + links.testTraceLinks.map(link => chalk_1.default.underline.cyan(link)).join(', '), 4));
            }
            if (links.videoLinks?.length) {
                // TODO: print all trace files URLs
                (0, util_1.printLn)((0, indent_string_1.default)('View video : ' + links.videoLinks.map(link => chalk_1.default.underline.cyan(link)).join(', '), 4));
            }
            (0, util_1.printLn)('');
        }
        this._printSummary();
    }
    onCheckEnd(sequenceId, checkResult, testResultId, links) {
        super.onCheckEnd(sequenceId, checkResult, testResultId, links);
        this._clearSummary();
        if (this.verbose) {
            (0, util_1.printLn)((0, util_1.formatCheckTitle)((0, util_1.resultToCheckStatus)(checkResult), checkResult));
            (0, util_1.printLn)((0, indent_string_1.default)((0, util_1.formatCheckResult)(checkResult), 4), 2, 1);
        }
        else {
            if (checkResult.hasFailures) {
                (0, util_1.printLn)((0, util_1.formatCheckTitle)(util_1.CheckStatus.FAILED, checkResult));
                (0, util_1.printLn)((0, indent_string_1.default)((0, util_1.formatCheckResult)(checkResult), 4), 2, 1);
            }
            if (checkResult.isDegraded) {
                (0, util_1.printLn)((0, util_1.formatCheckTitle)(util_1.CheckStatus.DEGRADED, checkResult));
                (0, util_1.printLn)((0, indent_string_1.default)((0, util_1.formatCheckResult)(checkResult), 4), 2, 1);
            }
        }
        if (links) {
            (0, util_1.printLn)((0, indent_string_1.default)('View result: ' + chalk_1.default.underline.cyan(links.testResultLink), 4));
            if (links.testTraceLinks?.length) {
                // TODO: print all video files URLs
                (0, util_1.printLn)((0, indent_string_1.default)('View trace : ' + links.testTraceLinks.map(link => chalk_1.default.underline.cyan(link)).join(', '), 4));
            }
            if (links.videoLinks?.length) {
                // TODO: print all trace files URLs
                (0, util_1.printLn)((0, indent_string_1.default)('View video : ' + links.videoLinks.map(link => chalk_1.default.underline.cyan(link)).join(', '), 4));
            }
            (0, util_1.printLn)('');
        }
        this._printSummary();
    }
    onError(err) {
        this._clearSummary();
        super.onError(err);
    }
}
exports.default = ListReporter;
//# sourceMappingURL=list.js.map