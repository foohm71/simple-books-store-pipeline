"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateChecklyConfig = void 0;
const alert_channel_codegen_1 = require("../constructs/alert-channel-codegen");
const alert_escalation_policy_codegen_1 = require("../constructs/alert-escalation-policy-codegen");
const frequency_codegen_1 = require("../constructs/frequency-codegen");
const key_value_pair_codegen_1 = require("../constructs/key-value-pair-codegen");
const playwright_config_codegen_1 = require("../constructs/playwright-config-codegen");
const private_location_codegen_1 = require("../constructs/private-location-codegen");
const retry_strategy_codegen_1 = require("../constructs/retry-strategy-codegen");
const sourcegen_1 = require("../sourcegen");
function buildCheckConfigDefaults(program, file, context, builder, resource) {
    if (resource.activated !== undefined) {
        builder.boolean('activated', resource.activated);
    }
    if (resource.muted !== undefined) {
        builder.boolean('muted', resource.muted);
    }
    if (resource.doubleCheck !== undefined) {
        builder.boolean('doubleCheck', resource.doubleCheck);
    }
    if (resource.shouldFail !== undefined) {
        builder.boolean('shouldFail', resource.shouldFail);
    }
    if (resource.runtimeId !== undefined) {
        builder.string('runtimeId', resource.runtimeId);
    }
    if (resource.locations !== undefined) {
        const locations = resource.locations;
        builder.array('locations', builder => {
            for (const location of locations) {
                builder.string(location);
            }
        });
    }
    if (resource.tags !== undefined) {
        const tags = resource.tags;
        builder.array('tags', builder => {
            for (const location of tags) {
                builder.string(location);
            }
        });
    }
    if (resource.frequency !== undefined) {
        builder.value('frequency', (0, frequency_codegen_1.valueForFrequency)(file, resource.frequency));
    }
    if (resource.environmentVariables !== undefined) {
        const environmentVariables = resource.environmentVariables;
        builder.array('environmentVariables', builder => {
            for (const variable of environmentVariables) {
                builder.value((0, key_value_pair_codegen_1.valueForKeyValuePair)(program, file, context, variable));
            }
        });
    }
    if (resource.alertChannels !== undefined) {
        const alertChannels = resource.alertChannels;
        builder.array('alertChannels', builder => {
            for (const alertChannel of alertChannels) {
                if (alertChannel.physicalId !== undefined && typeof alertChannel.physicalId === 'number') {
                    builder.value((0, alert_channel_codegen_1.valueForAlertChannelFromId)(file, alertChannel.physicalId));
                    continue;
                }
                throw new Error(`Unable to generate configuration code for Alert Channel '${alertChannel.logicalId}'`);
            }
        });
    }
    if (resource.privateLocations !== undefined) {
        const locations = resource.privateLocations;
        builder.array('privateLocations', builder => {
            for (const location of locations) {
                if (typeof location === 'string') {
                    builder.string(location);
                    continue;
                }
                if (location.physicalId !== undefined && typeof location.physicalId === 'string') {
                    builder.value((0, private_location_codegen_1.valueForPrivateLocationFromId)(file, location.physicalId));
                    continue;
                }
                throw new Error(`Unable to generate configuration code for Private Location '${location.logicalId}'`);
            }
        });
    }
    if (resource.retryStrategy !== undefined) {
        builder.value('retryStrategy', (0, retry_strategy_codegen_1.valueForRetryStrategy)(file, resource.retryStrategy));
    }
    if (resource.alertEscalationPolicy !== undefined) {
        builder.value('alertEscalationPolicy', (0, alert_escalation_policy_codegen_1.valueForAlertEscalation)(file, resource.alertEscalationPolicy));
    }
}
function valueForStringOrStringArray(value) {
    if (Array.isArray(value)) {
        return (0, sourcegen_1.array)(builder => {
            for (const match of value) {
                builder.string(match);
            }
        });
    }
    else {
        return new sourcegen_1.StringValue(value);
    }
}
function generateChecklyConfig(program, context, config, filename) {
    const file = program.generatedSupportFile(filename);
    file.header((0, sourcegen_1.docComment)(`\
This is a Checkly configuration file.

See {@link https://www.checklyhq.com/docs/cli/project-structure/} for
more information.`));
    file.namedImport('defineConfig', 'checkly');
    file.section((0, sourcegen_1.decl)((0, sourcegen_1.ident)('config'), builder => {
        builder.variable((0, sourcegen_1.expr)((0, sourcegen_1.ident)('defineConfig'), builder => {
            builder.call(builder => {
                builder.object(builder => {
                    builder.string('projectName', config.projectName);
                    builder.string('logicalId', config.logicalId);
                    if (config.repoUrl !== undefined) {
                        builder.string('repoUrl', config.repoUrl);
                    }
                    if (config.checks !== undefined) {
                        const checks = config.checks;
                        builder.object('checks', builder => {
                            if (checks.checkMatch !== undefined) {
                                builder.value('checkMatch', valueForStringOrStringArray(checks.checkMatch));
                            }
                            if (checks.ignoreDirectoriesMatch !== undefined) {
                                const ignoreDirectoriesMatch = checks.ignoreDirectoriesMatch;
                                builder.array('ignoreDirectoriesMatch', builder => {
                                    for (const match of ignoreDirectoriesMatch) {
                                        builder.string(match);
                                    }
                                });
                            }
                            if (checks.playwrightConfig !== undefined) {
                                builder.value('playwrightConfig', (0, playwright_config_codegen_1.valueForPlaywrightConfig)(checks.playwrightConfig));
                            }
                            buildCheckConfigDefaults(program, file, context, builder, checks);
                            if (checks.browserChecks !== undefined) {
                                const browserChecks = checks.browserChecks;
                                builder.object('browserChecks', builder => {
                                    if (browserChecks.testMatch !== undefined) {
                                        builder.value('testMatch', valueForStringOrStringArray(browserChecks.testMatch));
                                    }
                                    buildCheckConfigDefaults(program, file, context, builder, browserChecks);
                                });
                            }
                            if (checks.multiStepChecks !== undefined) {
                                const multiStepChecks = checks.multiStepChecks;
                                builder.object('multiStepChecks', builder => {
                                    if (multiStepChecks.testMatch !== undefined) {
                                        builder.value('testMatch', valueForStringOrStringArray(multiStepChecks.testMatch));
                                    }
                                    buildCheckConfigDefaults(program, file, context, builder, multiStepChecks);
                                });
                            }
                        });
                    }
                    if (config.cli !== undefined) {
                        const cli = config.cli;
                        builder.object('cli', builder => {
                            if (cli.runLocation !== undefined) {
                                builder.string('runLocation', cli.runLocation);
                            }
                            if (cli.privateRunLocation !== undefined) {
                                builder.string('privateRunLocation', cli.privateRunLocation);
                            }
                            if (cli.verbose !== undefined) {
                                builder.boolean('verbose', cli.verbose);
                            }
                            if (cli.failOnNoMatching !== undefined) {
                                builder.boolean('failOnNoMatching', cli.failOnNoMatching);
                            }
                            if (cli.reporters !== undefined) {
                                const reporters = cli.reporters;
                                builder.array('reporters', builder => {
                                    for (const reporter of reporters) {
                                        builder.string(reporter);
                                    }
                                });
                            }
                            if (cli.retries !== undefined) {
                                builder.number('retries', cli.retries);
                            }
                        });
                    }
                });
            });
        }));
    }));
    file.section((0, sourcegen_1.decl)((0, sourcegen_1.ident)('config'), builder => {
        builder.export({
            default: true,
        });
    }));
}
exports.generateChecklyConfig = generateChecklyConfig;
//# sourceMappingURL=checkly-config-codegen.js.map