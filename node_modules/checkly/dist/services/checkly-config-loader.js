"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadChecklyConfig = exports.ConfigNotFoundError = exports.getChecklyConfigFile = void 0;
const path = __importStar(require("path"));
const promises_1 = __importDefault(require("node:fs/promises"));
const fs_1 = require("fs");
const util_1 = require("./util");
const constructs_1 = require("../constructs");
function isString(obj) {
    return (Object.prototype.toString.call(obj) === '[object String]');
}
async function getChecklyConfigFile() {
    const filenames = [
        'checkly.config.ts',
        'checkly.config.mts',
        'checkly.config.cts',
        'checkly.config.js',
        'checkly.config.mjs',
        'checkly.config.cjs',
    ];
    let config;
    for (const configFile of filenames) {
        const dir = path.resolve(path.dirname(configFile));
        const configFilePath = path.resolve(dir, configFile);
        try {
            await promises_1.default.access(configFilePath, promises_1.default.constants.R_OK);
        }
        catch {
            continue;
        }
        const file = await promises_1.default.readFile(configFilePath);
        if (file) {
            config = {
                checklyConfig: file.toString(),
                fileName: configFile,
            };
            break;
        }
    }
    return config;
}
exports.getChecklyConfigFile = getChecklyConfigFile;
class ConfigNotFoundError extends Error {
}
exports.ConfigNotFoundError = ConfigNotFoundError;
async function loadChecklyConfig(dir, filenames = ['checkly.config.ts', 'checkly.config.mts', 'checkly.config.cts', 'checkly.config.js', 'checkly.config.mjs', 'checkly.config.cjs']) {
    let config;
    constructs_1.Session.loadingChecklyConfigFile = true;
    constructs_1.Session.checklyConfigFileConstructs = [];
    for (const filename of filenames) {
        const filePath = path.join(dir, filename);
        try {
            await promises_1.default.access(filePath, promises_1.default.constants.R_OK);
        }
        catch {
            continue;
        }
        config = await constructs_1.Session.loadFile(filePath);
        break;
    }
    if (!config) {
        config = await handleMissingConfig(dir, filenames);
    }
    validateConfigFields(config, ['logicalId', 'projectName']);
    const constructs = constructs_1.Session.checklyConfigFileConstructs;
    constructs_1.Session.loadingChecklyConfigFile = false;
    constructs_1.Session.checklyConfigFileConstructs = [];
    if (config.cli?.loader) {
        constructs_1.Session.loader = config.cli.loader;
    }
    return { config, constructs };
}
exports.loadChecklyConfig = loadChecklyConfig;
async function handleMissingConfig(dir, filenames) {
    const baseName = path.basename(dir);
    const playwrightConfigPath = findPlaywrightConfigPath(dir);
    if (playwrightConfigPath) {
        const checklyConfig = (0, util_1.getDefaultChecklyConfig)(baseName, `./${path.relative(dir, playwrightConfigPath)}`);
        await (0, util_1.writeChecklyConfigFile)(dir, checklyConfig);
        return checklyConfig;
    }
    throw new ConfigNotFoundError(`Unable to locate a config at ${dir} with ${filenames.join(', ')}.`);
}
function findPlaywrightConfigPath(dir) {
    return ['playwright.config.ts', 'playwright.config.js']
        .map(file => path.resolve(dir, file))
        .find(filePath => (0, fs_1.existsSync)(filePath));
}
function validateConfigFields(config, fields) {
    for (const field of fields) {
        if (!config?.[field] || !isString(config[field])) {
            throw new Error(`Config object missing a ${field} as type string`);
        }
    }
}
//# sourceMappingURL=checkly-config-loader.js.map