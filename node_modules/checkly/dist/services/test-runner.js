"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../rest/api");
const abstract_check_runner_1 = __importDefault(require("./abstract-check-runner"));
const snapshot_service_1 = require("../services/snapshot-service");
const uuid = __importStar(require("uuid"));
class TestRunner extends abstract_check_runner_1.default {
    project;
    checkConstructs;
    location;
    shouldRecord;
    repoInfo;
    environment;
    updateSnapshots;
    baseDirectory;
    testRetryStrategy;
    constructor(accountId, project, checks, location, timeout, verbose, shouldRecord, repoInfo, environment, updateSnapshots, baseDirectory, testRetryStrategy) {
        super(accountId, timeout, verbose);
        this.project = project;
        this.checkConstructs = checks;
        this.location = location;
        this.shouldRecord = shouldRecord;
        this.repoInfo = repoInfo;
        this.environment = environment;
        this.updateSnapshots = updateSnapshots;
        this.baseDirectory = baseDirectory;
        this.testRetryStrategy = testRetryStrategy;
    }
    async scheduleChecks(checkRunSuiteId) {
        const checkRunJobs = this.checkConstructs.map(check => ({
            ...check.synthesize(),
            testRetryStrategy: this.testRetryStrategy,
            group: check.groupId ? this.project.data['check-group'][check.groupId.ref].synthesize() : undefined,
            groupId: undefined,
            sourceInfo: {
                checkRunSuiteId,
                checkRunId: uuid.v4(),
                updateSnapshots: this.updateSnapshots,
            },
            logicalId: check.logicalId,
            filePath: check.getSourceFile(),
        }));
        try {
            if (!checkRunJobs.length) {
                throw new Error('Unable to find checks to run.');
            }
            const { data } = await api_1.testSessions.run({
                name: this.project.name,
                checkRunJobs,
                project: { logicalId: this.project.logicalId },
                runLocation: this.location,
                repoInfo: this.repoInfo,
                environment: this.environment,
                shouldRecord: this.shouldRecord,
            });
            const { testSessionId, sequenceIds } = data;
            const checks = this.checkConstructs.map(check => ({ check, sequenceId: sequenceIds?.[check.logicalId] }));
            return { testSessionId, checks };
        }
        catch (err) {
            throw new Error(err.response?.data?.message ?? err.response?.data?.error ?? err.message);
        }
    }
    async processCheckResult(result) {
        await super.processCheckResult(result);
        if (this.updateSnapshots) {
            await (0, snapshot_service_1.pullSnapshots)(this.baseDirectory, result.assets?.snapshots);
        }
    }
}
exports.default = TestRunner;
//# sourceMappingURL=test-runner.js.map