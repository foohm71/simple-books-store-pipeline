export declare class Runnable {
    executable: string;
    args: string[];
    constructor(executable: string, args: string[]);
    get unsafeDisplayCommand(): string;
}
export interface PackageManager {
    get name(): string;
    installCommand(): Runnable;
    execCommand(args: string[]): Runnable;
}
export declare abstract class PackageManagerDetector {
    abstract get name(): string;
    abstract detectUserAgent(userAgent: string): boolean;
    abstract detectRuntime(): boolean;
    abstract detectLockfile(dir: string): Promise<void>;
    abstract detectExecutable(lookup: PathLookup): Promise<void>;
    abstract installCommand(): Runnable;
    abstract execCommand(args: string[]): Runnable;
}
export declare class NpmDetector extends PackageManagerDetector implements PackageManager {
    get name(): string;
    detectUserAgent(userAgent: string): boolean;
    detectRuntime(): boolean;
    detectLockfile(dir: string): Promise<void>;
    detectExecutable(lookup: PathLookup): Promise<void>;
    installCommand(): Runnable;
    execCommand(args: string[]): Runnable;
}
export declare class CNpmDetector extends PackageManagerDetector implements PackageManager {
    get name(): string;
    detectUserAgent(userAgent: string): boolean;
    detectRuntime(): boolean;
    detectLockfile(): Promise<void>;
    detectExecutable(lookup: PathLookup): Promise<void>;
    installCommand(): Runnable;
    execCommand(args: string[]): Runnable;
}
export declare class PNpmDetector extends PackageManagerDetector implements PackageManager {
    get name(): string;
    detectUserAgent(userAgent: string): boolean;
    detectRuntime(): boolean;
    detectLockfile(dir: string): Promise<void>;
    detectExecutable(lookup: PathLookup): Promise<void>;
    installCommand(): Runnable;
    execCommand(args: string[]): Runnable;
}
export declare class YarnDetector extends PackageManagerDetector implements PackageManager {
    get name(): string;
    detectUserAgent(userAgent: string): boolean;
    detectRuntime(): boolean;
    detectLockfile(dir: string): Promise<void>;
    detectExecutable(lookup: PathLookup): Promise<void>;
    installCommand(): Runnable;
    execCommand(args: string[]): Runnable;
}
export declare class DenoDetector extends PackageManagerDetector implements PackageManager {
    get name(): string;
    detectUserAgent(userAgent: string): boolean;
    detectRuntime(): boolean;
    detectLockfile(dir: string): Promise<void>;
    detectExecutable(lookup: PathLookup): Promise<void>;
    installCommand(): Runnable;
    execCommand(args: string[]): Runnable;
}
export declare class BunDetector extends PackageManagerDetector implements PackageManager {
    get name(): string;
    detectUserAgent(userAgent: string): boolean;
    detectRuntime(): boolean;
    detectLockfile(dir: string): Promise<void>;
    detectExecutable(lookup: PathLookup): Promise<void>;
    installCommand(): Runnable;
    execCommand(args: string[]): Runnable;
}
/**
 * Inspiration taken from https://github.com/otiai10/lookpath.
 */
export declare class PathLookup {
    static win: boolean;
    paths: string[];
    pathext: string[];
    pathextSet: Set<string>;
    constructor();
    detectPresence(executable: string): Promise<void>;
    lookupPath(executable: string): Promise<string | undefined>;
}
export declare const knownPackageManagers: PackageManagerDetector[];
export interface DetectPackageManagerOptions {
    detectors?: PackageManagerDetector[];
}
export declare function detectPackageManager(dir: string, options?: DetectPackageManagerOptions): Promise<PackageManager>;
