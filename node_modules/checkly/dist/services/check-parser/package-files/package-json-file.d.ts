import { JsonSourceFile } from './json-source-file';
import { FileMeta } from './source-file';
type ExportCondition = 'node-addons' | 'node' | 'import' | 'require' | 'module-sync' | 'default';
type Schema = {
    name?: string;
    version?: string;
    license?: string;
    main?: string;
    exports?: string | string[] | Record<string, string> | Record<ExportCondition, Record<string, string>>;
    dependencies?: Record<string, string>;
    devDependencies?: Record<string, string>;
    private?: boolean;
};
export declare class PackageJsonFile {
    #private;
    static FILENAME: string;
    readonly id: number;
    jsonFile: JsonSourceFile<Schema>;
    basePath: string;
    mainPaths: string[];
    private constructor();
    get meta(): FileMeta;
    get dependencies(): Record<string, string> | undefined;
    get devDependencies(): Record<string, string> | undefined;
    static make(filePath: string, data: Schema): PackageJsonFile;
    static loadFromJsonSourceFile(jsonFile: JsonSourceFile<Schema>): PackageJsonFile | undefined;
    static filePath(dirPath: string): string;
    upsertDependencies(dependencies: Record<string, string>): boolean;
    upsertDevDependencies(dependencies: Record<string, string>): boolean;
    toJSON(): string;
}
export {};
