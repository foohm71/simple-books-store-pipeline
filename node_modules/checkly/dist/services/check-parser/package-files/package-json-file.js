"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageJsonFile = void 0;
const node_path_1 = __importDefault(require("node:path"));
const semver_1 = __importDefault(require("semver"));
const json_source_file_1 = require("./json-source-file");
const source_file_1 = require("./source-file");
class PackageJsonFile {
    static FILENAME = 'package.json';
    static #id = 0;
    id = ++PackageJsonFile.#id;
    jsonFile;
    basePath;
    mainPaths;
    constructor(jsonFile) {
        this.jsonFile = jsonFile;
        this.basePath = jsonFile.meta.dirname;
        const fallbackMainPath = node_path_1.default.resolve(this.basePath, 'index.js');
        this.mainPaths = jsonFile.data.main !== undefined
            ? [node_path_1.default.resolve(this.basePath, jsonFile.data.main), fallbackMainPath]
            : [fallbackMainPath];
    }
    get meta() {
        return this.jsonFile.meta;
    }
    get dependencies() {
        return this.jsonFile.data.dependencies;
    }
    get devDependencies() {
        return this.jsonFile.data.devDependencies;
    }
    static make(filePath, data) {
        const contents = formatContents(data);
        const sourceFile = new source_file_1.SourceFile(source_file_1.FileMeta.fromFilePath(filePath), contents);
        const jsonFile = new json_source_file_1.JsonSourceFile(sourceFile, data);
        return new PackageJsonFile(jsonFile);
    }
    static loadFromJsonSourceFile(jsonFile) {
        return new PackageJsonFile(jsonFile);
    }
    static filePath(dirPath) {
        return node_path_1.default.join(dirPath, PackageJsonFile.FILENAME);
    }
    upsertDependencies(dependencies) {
        const result = updateDependencies(this.jsonFile.data.dependencies, dependencies);
        if (!result.changed) {
            return false;
        }
        this.jsonFile.data.dependencies = sortDependencies(result.dependencies);
        return true;
    }
    upsertDevDependencies(dependencies) {
        const result = updateDependencies(this.jsonFile.data.devDependencies, dependencies);
        if (!result.changed) {
            return false;
        }
        this.jsonFile.data.devDependencies = sortDependencies(result.dependencies);
        return true;
    }
    toJSON() {
        return formatContents(this.jsonFile.data);
    }
}
exports.PackageJsonFile = PackageJsonFile;
function updateDependencies(oldDependencies = {}, newDependencies = {}) {
    const result = {
        dependencies: { ...oldDependencies },
        changed: false,
    };
    const safeMinVersion = (version) => {
        try {
            return semver_1.default.minVersion(version);
        }
        catch {
            return null;
        }
    };
    for (const [name, newVersion] of Object.entries(newDependencies)) {
        const oldVersion = oldDependencies[name];
        if (oldVersion !== undefined) {
            const oldMinVersion = safeMinVersion(oldVersion);
            if (oldMinVersion === null) {
                // Assume it's something we shouldn't change.
                continue;
            }
            const newMinVersion = safeMinVersion(newVersion);
            if (newMinVersion === null) {
                // This should not happen.
                throw new Error(`Invalid new version '${newVersion}' for dependency '${name}'`);
            }
            if (oldMinVersion.compare(newMinVersion) >= 0) {
                // It's recent enough.
                continue;
            }
        }
        result.changed = true;
        result.dependencies[name] = newVersion;
    }
    return result;
}
function sortDependencies(dependencies) {
    return Object.fromEntries(Object.keys(dependencies).sort().map(name => {
        return [name, dependencies[name]];
    }));
}
function formatContents(data) {
    // NPM adds a trailing newline, so we do too.
    return JSON.stringify(data, null, 2) + '\n';
}
//# sourceMappingURL=package-json-file.js.map