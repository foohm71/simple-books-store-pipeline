"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileExtPath = exports.tsExtensionLookupOrder = exports.TSExtensions = exports.tsCoreExtensionLookupOrder = exports.CoreExtensions = void 0;
const node_path_1 = __importDefault(require("node:path"));
exports.CoreExtensions = ['.js', '.mjs', '.cjs', '.json'];
/**
 * Unlike TypeScript's native lookup order, our lookup order prefers
 * implementation files to declaration files.
 *
 * Why include declaration files at all? Some of our users use manually
 * created declaration files as essentially shared header files without a
 * corresponding implementation file, and the declaration is the only thing
 * we'll be able to find. Otherwise we'd complain about a missing dependency.
 *
 * @see https://www.typescriptlang.org/docs/handbook/modules/reference.html#file-extension-substitution
 */
exports.tsCoreExtensionLookupOrder = {
    '.js': ['.ts', '.tsx', '.js', '.jsx', '.d.ts'],
    '.mjs': ['.mts', '.mjs', '.d.mts'],
    '.cjs': ['.cts', '.cjs', '.d.cts'],
    '.json': ['.json'],
};
exports.TSExtensions = ['.ts', '.mts', '.tsx'];
exports.tsExtensionLookupOrder = {
    '.ts': ['.ts'],
    '.mts': ['.mts'],
    '.tsx': ['.tsx'],
};
function stripKnownSuffix(value, suffix) {
    return value.substring(0, value.length - suffix.length);
}
class FileExtPath {
    filePath;
    ext;
    constructor(filePath, ext) {
        this.filePath = filePath;
        this.ext = ext;
    }
    static fromFilePath(filePath) {
        const ext = node_path_1.default.extname(filePath);
        return new FileExtPath(filePath, ext);
    }
    hasCoreExtension() {
        return this.ext in exports.tsCoreExtensionLookupOrder;
    }
    hasTypeScriptExtension() {
        return this.ext in exports.tsExtensionLookupOrder;
    }
    replaceExt(ext) {
        return stripKnownSuffix(this.filePath, this.ext) + ext;
    }
    appendExt(ext) {
        return this.filePath + ext;
    }
    resolve(...paths) {
        return node_path_1.default.resolve(this.filePath, ...paths);
    }
    self() {
        return this.filePath;
    }
}
exports.FileExtPath = FileExtPath;
//# sourceMappingURL=extension.js.map