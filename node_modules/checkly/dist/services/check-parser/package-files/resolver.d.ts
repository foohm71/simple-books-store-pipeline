import { SourceFile } from './source-file';
import { PackageJsonFile } from './package-json-file';
import { TSConfigFile } from './tsconfig-json-file';
import { JSConfigFile } from './jsconfig-json-file';
import { PathResult } from './paths';
import { LookupContext } from './lookup';
declare class PackageFilesCache {
    #private;
    sourceFile(filePath: string, context: LookupContext): SourceFile | undefined;
    packageJson(filePath: string): PackageJsonFile | undefined;
    tsconfigJson(filePath: string): TSConfigFile | undefined;
    jsconfigJson(filePath: string): JSConfigFile | undefined;
}
declare class PackageFiles {
    packageJson?: PackageJsonFile;
    tsconfigJson?: TSConfigFile;
    jsconfigJson?: JSConfigFile;
    satisfyFromDirPath(dirPath: string, cache: PackageFilesCache): boolean;
    get satisfied(): boolean;
}
type TSConfigFileLocalDependency = {
    kind: 'tsconfig-file';
    importPath: string;
    sourceFile: SourceFile;
    configFile: TSConfigFile;
};
type TSConfigResolvedPathLocalDependency = {
    kind: 'tsconfig-resolved-path';
    importPath: string;
    sourceFile: SourceFile;
    configFile: TSConfigFile;
    pathResult: PathResult;
};
type TSConfigBaseUrlRelativePathLocalDependency = {
    kind: 'tsconfig-baseurl-relative-path';
    importPath: string;
    configFile: TSConfigFile;
    sourceFile: SourceFile;
};
type RelativePathLocalDependency = {
    kind: 'relative-path';
    importPath: string;
    sourceFile: SourceFile;
};
type LocalDependency = TSConfigFileLocalDependency | TSConfigResolvedPathLocalDependency | TSConfigBaseUrlRelativePathLocalDependency | RelativePathLocalDependency;
type MissingDependency = {
    importPath: string;
    filePath: string;
};
type ExternalDependency = {
    importPath: string;
};
export type Dependencies = {
    external: ExternalDependency[];
    missing: MissingDependency[];
    local: LocalDependency[];
};
export interface WalkUpOptions {
    root?: string;
    isDir?: boolean;
}
export declare class PackageFilesResolver {
    cache: PackageFilesCache;
    loadPackageJsonFile(filePath: string, options?: WalkUpOptions): PackageJsonFile | undefined;
    loadPackageFiles(filePath: string, options?: WalkUpOptions): PackageFiles;
    private resolveSourceFile;
    resolveDependenciesForFilePath(filePath: string, dependencies: string[]): Dependencies;
}
export {};
