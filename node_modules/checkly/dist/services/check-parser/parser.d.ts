import { PackageFilesResolver, Dependencies } from './package-files/resolver';
type Module = {
    dependencies: Array<string>;
};
type ParserOptions = {
    supportedNpmModules?: Array<string>;
    checkUnsupportedModules?: boolean;
};
export declare class Parser {
    supportedModules: Set<string>;
    checkUnsupportedModules: boolean;
    resolver: PackageFilesResolver;
    cache: Map<string, {
        module: Module;
        resolvedDependencies?: Dependencies | undefined;
        error?: any;
    }>;
    constructor(options: ParserOptions);
    supportsModule(importPath: string): boolean;
    private validateFileAsync;
    getFilesAndDependencies(paths: string[]): Promise<{
        files: string[];
        errors: string[];
    }>;
    private getFilesFromPaths;
    parse(entrypoint: string): {
        entrypoint: {
            filePath: string;
            content: string;
        };
        dependencies: {
            filePath: string;
            content: string;
        }[];
    };
    static parseDependencies(filePath: string, contents: string): {
        module: Module;
        error?: any;
    };
    static jsNodeVisitor(dependencies: Set<string>): any;
    static tsNodeVisitor(tsParser: any, dependencies: Set<string>): any;
    static isRequireExpression(node: any): boolean;
    static getRequireStringArg(node: any): string | null;
    static registerDependency(importArg: string | null, dependencies: Set<string>): void;
}
export {};
