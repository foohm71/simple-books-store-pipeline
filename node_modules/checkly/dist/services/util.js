"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findFilesWithPattern = exports.assignProxy = exports.getEnvs = exports.escapeValue = exports.getCiInformation = exports.getGitInformation = exports.isFileSync = exports.splitConfigFilePath = exports.pathToPosix = exports.findFilesRecursively = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs/promises"));
const fsSync = __importStar(require("fs"));
const git_repo_info_1 = __importDefault(require("git-repo-info"));
const dotenv_1 = require("dotenv");
// @ts-ignore
const proxy_from_env_1 = require("proxy-from-env");
const tunnel_1 = require("tunnel");
const glob_1 = require("glob");
function findFilesRecursively(directory, ignoredPaths = []) {
    if (!fsSync.statSync(directory, { throwIfNoEntry: false })?.isDirectory()) {
        return [];
    }
    const files = [];
    const directoriesToVisit = [directory];
    const ignoredPathsSet = new Set(ignoredPaths);
    while (directoriesToVisit.length > 0) {
        const currentDirectory = directoriesToVisit.shift();
        const contents = fsSync.readdirSync(currentDirectory, { withFileTypes: true });
        for (const content of contents) {
            if (content.isSymbolicLink()) {
                continue;
            }
            const fullPath = path.resolve(currentDirectory, content.name);
            if (ignoredPathsSet.has(fullPath)) {
                continue;
            }
            if (content.isDirectory()) {
                directoriesToVisit.push(fullPath);
            }
            else {
                files.push(fullPath);
            }
        }
    }
    return files;
}
exports.findFilesRecursively = findFilesRecursively;
/**
 * @param relPath the path to be converted
 * @param separator this is for testing purposes only so we can reliably replace the separator on Linux / Darwin
 */
function pathToPosix(relPath, separator) {
    // Windows uses \ rather than / as a path separator.
    // It's important that logical ID's are consistent across platforms, though.
    // Otherwise, checks will be deleted and recreated when `npx checkly deploy` is run on different machines.
    return path.normalize(relPath).split(separator ?? path.sep).join(path.posix.sep).replace(/^[C|D]:/i, '');
}
exports.pathToPosix = pathToPosix;
function splitConfigFilePath(configFile) {
    if (configFile) {
        const cwd = path.resolve(path.dirname(configFile));
        return {
            configDirectory: cwd,
            configFilenames: [path.basename(configFile)],
        };
    }
    return {
        configDirectory: process.cwd(),
        configFilenames: undefined,
    };
}
exports.splitConfigFilePath = splitConfigFilePath;
function isFileSync(path) {
    // This helper is useful to test paths inside constructors which cannot be async.
    let result;
    try {
        result = fsSync.existsSync(path);
    }
    catch (err) {
        throw new Error(`Error parsing the file path: ${path}`);
    }
    return result;
}
exports.isFileSync = isFileSync;
/**
 * @param repoUrl default repoURL the user can set in their project config.
 */
function getGitInformation(repoUrl) {
    const repositoryInfo = (0, git_repo_info_1.default)();
    if (!process.env.CHECKLY_REPO_SHA && !process.env.CHECKLY_TEST_REPO_SHA && !repositoryInfo.sha) {
        return null;
    }
    // safe way to remove the email address
    const committer = (repositoryInfo.committer?.match(/([^<]+)/) || [])[1]?.trim();
    return {
        commitId: process.env.CHECKLY_REPO_SHA ?? process.env.CHECKLY_TEST_REPO_SHA ?? repositoryInfo.sha,
        repoUrl: process.env.CHECKLY_REPO_URL ?? process.env.CHECKLY_TEST_REPO_URL ?? repoUrl,
        branchName: process.env.CHECKLY_REPO_BRANCH ?? process.env.CHECKLY_TEST_REPO_BRANCH ?? repositoryInfo.branch,
        commitOwner: process.env.CHECKLY_REPO_COMMIT_OWNER ?? process.env.CHECKLY_TEST_REPO_COMMIT_OWNER ?? committer,
        commitMessage: process.env.CHECKLY_REPO_COMMIT_MESSAGE ??
            process.env.CHECKLY_TEST_REPO_COMMIT_MESSAGE ??
            repositoryInfo.commitMessage,
    };
}
exports.getGitInformation = getGitInformation;
function getCiInformation() {
    return {
        environment: process.env.CHECKLY_TEST_ENVIRONMENT ?? null,
    };
}
exports.getCiInformation = getCiInformation;
function escapeValue(value) {
    return value
        ? value
            .replace(/\n/g, '\\n') // combine newlines (unix) into one line
            .replace(/\r/g, '\\r') // combine newlines (windows) into one line
        : '';
}
exports.escapeValue = escapeValue;
async function getEnvs(envFile, envArgs) {
    if (envFile) {
        const envsString = await fs.readFile(envFile, { encoding: 'utf8' });
        return (0, dotenv_1.parse)(envsString);
    }
    const envsString = `${envArgs.join('\n')}`;
    return (0, dotenv_1.parse)(envsString);
}
exports.getEnvs = getEnvs;
const isHttps = (protocol) => protocol.startsWith('https');
function assignProxy(baseURL, axiosConfig) {
    const proxyUrlEnv = (0, proxy_from_env_1.getProxyForUrl)(baseURL);
    if (!proxyUrlEnv) {
        return axiosConfig;
    }
    const parsedProxyUrl = new URL(proxyUrlEnv);
    const isProxyHttps = isHttps(parsedProxyUrl.protocol);
    const isEndpointHttps = isHttps(baseURL);
    const proxy = {
        host: parsedProxyUrl.hostname,
        port: parsedProxyUrl.port,
        protocol: parsedProxyUrl.protocol,
    };
    if (parsedProxyUrl.username && parsedProxyUrl.password) {
        proxy.proxyAuth = `${parsedProxyUrl.username}:${parsedProxyUrl.password}`;
    }
    if (isProxyHttps && isEndpointHttps) {
        axiosConfig.httpsAgent = (0, tunnel_1.httpsOverHttps)({ proxy });
    }
    else if (isProxyHttps && !isEndpointHttps) {
        axiosConfig.httpAgent = (0, tunnel_1.httpOverHttps)({ proxy });
    }
    else if (!isProxyHttps && isEndpointHttps) {
        axiosConfig.httpsAgent = (0, tunnel_1.httpsOverHttp)({ proxy });
    }
    else {
        axiosConfig.httpAgent = (0, tunnel_1.httpOverHttp)({ proxy });
    }
    axiosConfig.proxy = false;
    return axiosConfig;
}
exports.assignProxy = assignProxy;
async function findFilesWithPattern(directory, pattern, ignorePattern) {
    // The files are sorted to make sure that the processing order is deterministic.
    const files = await (0, glob_1.glob)(pattern, {
        nodir: true,
        cwd: directory,
        ignore: ignorePattern,
        absolute: true,
    });
    return files.sort();
}
exports.findFilesWithPattern = findFilesWithPattern;
//# sourceMappingURL=util.js.map