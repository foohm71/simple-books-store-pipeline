{
  "commands": {
    "authCommand": {
      "aliases": [],
      "args": {},
      "flags": {},
      "hasDynamicHelp": false,
      "hidden": true,
      "hiddenAliases": [],
      "id": "authCommand",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "authCommand.js"
      ]
    },
    "baseCommand": {
      "aliases": [],
      "args": {},
      "flags": {},
      "hasDynamicHelp": false,
      "hidden": true,
      "hiddenAliases": [],
      "id": "baseCommand",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "baseCommand.js"
      ]
    },
    "deploy": {
      "aliases": [],
      "args": {},
      "description": "Deploy your project to your Checkly account.",
      "flags": {
        "preview": {
          "char": "p",
          "description": "Show a preview of the changes made by the deploy command.",
          "name": "preview",
          "allowNo": false,
          "type": "boolean"
        },
        "output": {
          "char": "o",
          "description": "Shows the changes made after the deploy command.",
          "name": "output",
          "allowNo": false,
          "type": "boolean"
        },
        "schedule-on-deploy": {
          "description": "Enables automatic check scheduling after a deploy.",
          "name": "schedule-on-deploy",
          "allowNo": true,
          "type": "boolean"
        },
        "force": {
          "char": "f",
          "description": "Force mode. Skips the confirmation dialog.",
          "name": "force",
          "allowNo": false,
          "type": "boolean"
        },
        "config": {
          "char": "c",
          "description": "The Checkly CLI configuration file. If not passed, uses the checkly.config.ts|js file in the current directory.",
          "name": "config",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "verify-runtime-dependencies": {
          "description": "[default: true] Return an error if checks import dependencies that are not supported by the selected runtime.",
          "env": "CHECKLY_VERIFY_RUNTIME_DEPENDENCIES",
          "name": "verify-runtime-dependencies",
          "allowNo": true,
          "type": "boolean"
        },
        "debug-bundle": {
          "description": "Output the project bundle to a file without deploying any resources.",
          "hidden": true,
          "name": "debug-bundle",
          "allowNo": false,
          "type": "boolean"
        },
        "debug-bundle-output-file": {
          "description": "The file to output the debug debug bundle to.",
          "hidden": true,
          "name": "debug-bundle-output-file",
          "default": "./debug-bundle.json",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "deploy",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": true,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "deploy.js"
      ]
    },
    "destroy": {
      "aliases": [],
      "args": {},
      "description": "Destroy your project with all its related resources.",
      "flags": {
        "force": {
          "char": "f",
          "description": "Force mode. Skips the confirmation dialog.",
          "name": "force",
          "allowNo": false,
          "type": "boolean"
        },
        "config": {
          "char": "c",
          "description": "The Checkly CLI configuration file. If not passed, uses the checkly.config.ts|js file in the current directory.",
          "name": "config",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "destroy",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "destroy.js"
      ]
    },
    "help": {
      "aliases": [],
      "args": {},
      "description": "Display help for <%= config.bin %>.",
      "flags": {},
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "help",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "help.js"
      ]
    },
    "login": {
      "aliases": [],
      "args": {},
      "description": "Login to your Checkly account or create a new one.",
      "flags": {},
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "login",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "login.js"
      ]
    },
    "logout": {
      "aliases": [],
      "args": {},
      "description": "Log out and clear any local credentials.",
      "flags": {
        "force": {
          "char": "f",
          "description": "Force mode. Skips the confirmation dialog.",
          "name": "force",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "logout",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "logout.js"
      ]
    },
    "runtimes": {
      "aliases": [],
      "args": {},
      "description": "List all supported runtimes and dependencies.",
      "flags": {},
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "runtimes",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "runtimes.js"
      ]
    },
    "switch": {
      "aliases": [],
      "args": {},
      "description": "Switch user account.",
      "flags": {
        "account-id": {
          "char": "a",
          "description": "The id of the account you want to switch to.",
          "name": "account-id",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "switch",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "switch.js"
      ]
    },
    "sync-playwright": {
      "aliases": [],
      "args": {},
      "description": "Copy Playwright config into the Checkly config file.",
      "flags": {},
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "sync-playwright",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "sync-playwright.js"
      ]
    },
    "test": {
      "aliases": [],
      "args": {
        "fileArgs": {
          "default": ".*",
          "description": "Only run checks where the file name matches a regular expression",
          "name": "fileArgs",
          "required": false
        }
      },
      "description": "Test your checks on Checkly.",
      "flags": {
        "location": {
          "char": "l",
          "description": "The location to run the checks at.",
          "name": "location",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "private-location": {
          "description": "The private location to run checks at.",
          "exclusive": [
            "location"
          ],
          "name": "private-location",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "grep": {
          "char": "g",
          "description": "Only run checks where the check name matches a regular expression.",
          "name": "grep",
          "default": ".*",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "tags": {
          "char": "t",
          "description": "Filter the checks to be run using a comma separated list of tags. Checks will only be run if they contain all of the specified tags. Multiple --tags flags can be passed, in which case checks will be run if they match any of the --tags filters. F.ex. `--tags production,webapp --tags production,backend` will run checks with tags (production AND webapp) OR (production AND backend).",
          "name": "tags",
          "required": false,
          "hasDynamicHelp": false,
          "multiple": true,
          "type": "option"
        },
        "env": {
          "char": "e",
          "description": "Env vars to be passed to the test run.",
          "exclusive": [
            "env-file"
          ],
          "name": "env",
          "default": [],
          "hasDynamicHelp": false,
          "multiple": true,
          "type": "option"
        },
        "env-file": {
          "description": "dotenv file path to be passed. For example --env-file=\"./.env\"",
          "exclusive": [
            "env"
          ],
          "name": "env-file",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "list": {
          "description": "list all checks but don't run them.",
          "name": "list",
          "allowNo": false,
          "type": "boolean"
        },
        "timeout": {
          "description": "A timeout (in seconds) to wait for checks to complete.",
          "name": "timeout",
          "default": 600,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "verbose": {
          "char": "v",
          "description": "Always show the full logs of the checks.",
          "name": "verbose",
          "allowNo": true,
          "type": "boolean"
        },
        "reporter": {
          "char": "r",
          "description": "A list of custom reporters for the test output.",
          "name": "reporter",
          "hasDynamicHelp": false,
          "multiple": false,
          "options": [
            "list",
            "dot",
            "ci",
            "github",
            "json"
          ],
          "type": "option"
        },
        "config": {
          "char": "c",
          "description": "The Checkly CLI configuration file. If not passed, uses the checkly.config.ts|js file in the current directory.",
          "name": "config",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "record": {
          "description": "Record test results in Checkly as a test session with full logs, traces and videos.",
          "name": "record",
          "allowNo": false,
          "type": "boolean"
        },
        "test-session-name": {
          "char": "n",
          "description": "A name to use when storing results in Checkly with --record.",
          "name": "test-session-name",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "update-snapshots": {
          "char": "u",
          "description": "Update any snapshots using the actual result of this test run.",
          "name": "update-snapshots",
          "allowNo": false,
          "type": "boolean"
        },
        "retries": {
          "description": "[default: 0, max: 3] How many times to retry a failing test run.",
          "name": "retries",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "verify-runtime-dependencies": {
          "description": "[default: true] Return an error if checks import dependencies that are not supported by the selected runtime.",
          "env": "CHECKLY_VERIFY_RUNTIME_DEPENDENCIES",
          "name": "verify-runtime-dependencies",
          "allowNo": true,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "test",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": false,
      "enableJsonFlag": false,
      "coreCommand": true,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "test.js"
      ]
    },
    "trigger": {
      "aliases": [],
      "args": {},
      "description": "Trigger your existing checks on Checkly.",
      "flags": {
        "location": {
          "char": "l",
          "description": "The location to run the checks at.",
          "name": "location",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "private-location": {
          "description": "The private location to run checks at.",
          "exclusive": [
            "location"
          ],
          "name": "private-location",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "tags": {
          "char": "t",
          "description": "Filter the checks to be run using a comma separated list of tags. Checks will only be run if they contain all of the specified tags. Multiple --tags flags can be passed, in which case checks will be run if they match any of the --tags filters. F.ex. `--tags production,webapp --tags production,backend` will run checks with tags (production AND webapp) OR (production AND backend).",
          "name": "tags",
          "required": false,
          "hasDynamicHelp": false,
          "multiple": true,
          "type": "option"
        },
        "config": {
          "char": "c",
          "description": "The Checkly CLI config filename.",
          "name": "config",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "timeout": {
          "description": "A timeout (in seconds) to wait for checks to complete.",
          "name": "timeout",
          "default": 600,
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "verbose": {
          "char": "v",
          "description": "Always show the full logs of the checks.",
          "name": "verbose",
          "allowNo": true,
          "type": "boolean"
        },
        "fail-on-no-matching": {
          "description": "Exit with a failing status code when there are no matching tests.",
          "name": "fail-on-no-matching",
          "allowNo": false,
          "type": "boolean"
        },
        "reporter": {
          "char": "r",
          "description": "A list of custom reporters for the test output.",
          "name": "reporter",
          "hasDynamicHelp": false,
          "multiple": false,
          "options": [
            "list",
            "dot",
            "ci",
            "github",
            "json"
          ],
          "type": "option"
        },
        "env": {
          "char": "e",
          "description": "Env vars to be passed to the check run.",
          "exclusive": [
            "env-file"
          ],
          "name": "env",
          "default": [],
          "hasDynamicHelp": false,
          "multiple": true,
          "type": "option"
        },
        "env-file": {
          "description": "dotenv file path to be passed. For example --env-file=\"./.env\"",
          "exclusive": [
            "env"
          ],
          "name": "env-file",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "record": {
          "description": "Record check results in Checkly as a test session with full logs, traces and videos.",
          "name": "record",
          "allowNo": false,
          "type": "boolean"
        },
        "test-session-name": {
          "char": "n",
          "description": "A name to use when storing results in Checkly with --record.",
          "name": "test-session-name",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "retries": {
          "description": "[default: 0, max: 3] How many times to retry a check run.",
          "name": "retries",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "trigger",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": true,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "trigger.js"
      ]
    },
    "whoami": {
      "aliases": [],
      "args": {},
      "description": "See your currently logged in account and user.",
      "flags": {},
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "whoami",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "whoami.js"
      ]
    },
    "env:add": {
      "aliases": [],
      "args": {
        "key": {
          "description": "Environment variable key.",
          "name": "key",
          "required": true
        },
        "value": {
          "description": "Environment variable value.",
          "name": "value",
          "required": false
        }
      },
      "description": "Add environment variable via \"checkly env add <key> <value>\".",
      "flags": {
        "locked": {
          "char": "l",
          "description": "Indicate that the environment variable will be locked.",
          "name": "locked",
          "allowNo": false,
          "type": "boolean"
        },
        "secret": {
          "char": "s",
          "description": "Indicate that the environment variable will be secret.",
          "exclusive": [
            "locked"
          ],
          "name": "secret",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "env:add",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "env",
        "add.js"
      ]
    },
    "env:ls": {
      "aliases": [],
      "args": {},
      "description": "List all Checkly environment variables via \"checkly env ls\".",
      "flags": {},
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "env:ls",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "env",
        "ls.js"
      ]
    },
    "env:pull": {
      "aliases": [],
      "args": {
        "filename": {
          "default": ".env",
          "description": "Filename of the generated file.",
          "name": "filename",
          "required": false
        }
      },
      "description": "Pull Checkly environment variables via \"checkly env pull <filename>\".",
      "flags": {
        "force": {
          "char": "f",
          "description": "Force to overwrite existing file.",
          "name": "force",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "env:pull",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "env",
        "pull.js"
      ]
    },
    "env:rm": {
      "aliases": [],
      "args": {
        "key": {
          "description": "Environment variable key to remove.",
          "name": "key",
          "required": true
        }
      },
      "description": "Remove environment variable via \"checkly env rm <key>\".",
      "flags": {
        "force": {
          "char": "f",
          "description": "Force to skip the confirmation prompt.",
          "name": "force",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "env:rm",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "env",
        "rm.js"
      ]
    },
    "env:update": {
      "aliases": [],
      "args": {
        "key": {
          "description": "Environment variable key.",
          "name": "key",
          "required": true
        },
        "value": {
          "description": "Environment variable value.",
          "name": "value",
          "required": false
        }
      },
      "description": "Update environment variable via \"checkly env update <key> <value>\".",
      "flags": {
        "locked": {
          "char": "l",
          "description": "Indicate if environment variable is locked.",
          "name": "locked",
          "allowNo": false,
          "type": "boolean"
        },
        "secret": {
          "char": "s",
          "description": "Indicate if environment variable is secret.",
          "exclusive": [
            "locked"
          ],
          "name": "secret",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "env:update",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "env",
        "update.js"
      ]
    },
    "import:apply": {
      "aliases": [],
      "args": {},
      "description": "Attach imported resources into your project in a pending state.",
      "flags": {
        "config": {
          "char": "c",
          "description": "The Checkly CLI configuration file. If not passed, uses the checkly.config.ts|js file in the current directory.",
          "name": "config",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "import:apply",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "import",
        "apply.js"
      ]
    },
    "import:cancel": {
      "aliases": [],
      "args": {},
      "description": "Cancels an ongoing import plan that has not been committed yet.",
      "flags": {
        "config": {
          "char": "c",
          "description": "The Checkly CLI configuration file. If not passed, uses the checkly.config.ts|js file in the current directory.",
          "name": "config",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "all": {
          "description": "Cancel all plans.",
          "name": "all",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "import:cancel",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "import",
        "cancel.js"
      ]
    },
    "import:commit": {
      "aliases": [],
      "args": {},
      "description": "Permanently commit imported resources into your project.",
      "flags": {
        "config": {
          "char": "c",
          "description": "The Checkly CLI configuration file. If not passed, uses the checkly.config.ts|js file in the current directory.",
          "name": "config",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [],
      "id": "import:commit",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "import",
        "commit.js"
      ]
    },
    "import:plan": {
      "aliases": [],
      "args": {
        "resource": {
          "description": "A specific resource to import.",
          "name": "resource",
          "required": false
        }
      },
      "description": "Import existing resources from your Checkly account to your project.\n\nBy default, all resources that can be imported will be imported. However, you\nmay fine-tune the process by including or excluding any combination of\nresources.\n\nThe import process consists of three steps:\n\n1. Creating a plan, which generates the appropriate code for your resources\n2. Applying the plan, which links your resources to the generated code\n3. Committing the plan, which finalizes the import session\n\nCREATING A PLAN\n\nCreating a plan carries no risk as no concrete links to your Checkly resources\nare made at this point. However, if you accidentally deploy the generated code\nbefore applying the plan, you will end up with duplicate resources and will\nnot be able to complete the import session without first deleting the\nduplicates.\n\nFor the curious, you may also preview the generated code with the '--preview'\noption. No plan will be created, allowing you to leisurely inspect the\ngenerated code. However keep in mind that you will need to create a plan to\nactually import any resources, at which point the code will be generated\nagain.\n\nYou may cancel any plan you've created without affecting any of the\nunderlying resources.\n\nAPPLYING A PLAN\n\nApplying a plan links your existing resources to the generated code. You\nshould carefully review the generated code to make sure that it contains the\nresources you expect before applying a plan. After a plan has been applied,\nany deployments of those resources will irreversibly modify the underlying\nCheckly resources. However, as a fail safe against concurrent use, any\ndeployments not including the imported resources will not delete the\nunderlying resources (or the links to the resources). This means that there\nis no need to block deployments while working on an import session.\n\nEven after you've applied a plan, you may still cancel it, which will unlink\nthe underlying resources from your project once more. However, keep in mind\nthat any changes to the resources that you've already deployed cannot be\nundone.\n\nCOMMITTING A PLAN\n\nFinally, committing a plan removes all fail safes and permanently links the\nimported resources to your project. Any resources you remove from your code\nwill result in the underlying resources also getting irrevocably deleted on\nthe next deploy. You should only commit your plan once you are sure that all\nfuture deployments include the imported resources.",
      "flags": {
        "config": {
          "char": "c",
          "description": "The Checkly CLI configuration file. If not passed, uses the checkly.config.ts|js file in the current directory.",
          "name": "config",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "root": {
          "description": "The root folder in which to write generated code files.",
          "name": "root",
          "default": "__checks__",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "preview": {
          "description": "Preview generated code without creating an actual import plan.",
          "name": "preview",
          "allowNo": false,
          "type": "boolean"
        },
        "debug-import-plan": {
          "description": "Output the import plan to a file.",
          "hidden": true,
          "name": "debug-import-plan",
          "allowNo": false,
          "type": "boolean"
        },
        "debug-import-plan-output-file": {
          "description": "The file to output the import plan to.",
          "hidden": true,
          "name": "debug-import-plan-output-file",
          "default": "./debug-import-plan.json",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hidden": false,
      "hiddenAliases": [
        "import"
      ],
      "id": "import:plan",
      "pluginAlias": "checkly",
      "pluginName": "checkly",
      "pluginType": "core",
      "strict": false,
      "enableJsonFlag": false,
      "coreCommand": false,
      "isESM": false,
      "relativePath": [
        "dist",
        "commands",
        "import",
        "plan.js"
      ]
    }
  },
  "version": "5.4.0"
}